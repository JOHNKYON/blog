{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/leetcode17_1.png","path":"images/leetcode17_1.png","modified":0,"renderable":0},{"_id":"source/images/leetcode753_1.png","path":"images/leetcode753_1.png","modified":0,"renderable":0},{"_id":"source/images/leetcode753_2.png","path":"images/leetcode753_2.png","modified":0,"renderable":0},{"_id":"source/images/leetcode17_2.png","path":"images/leetcode17_2.png","modified":0,"renderable":0},{"_id":"source/images/github_project/1.png","path":"images/github_project/1.png","modified":0,"renderable":0},{"_id":"source/images/github_project/3.png","path":"images/github_project/3.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"source/images/github_project/2.png","path":"images/github_project/2.png","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"3bb97e106b238801ea4924f6866bfb6a0fdd9e74","modified":1526014748744},{"_id":"themes/next/.DS_Store","hash":"be4c34505f71efd3ed61394c20beab761295f98e","modified":1526310581762},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1521703073000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1521703073000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1521703073000},{"_id":"themes/next/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1521703073000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1521703073000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1521703073000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1521703073000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1521703073000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1521703073000},{"_id":"themes/next/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1521703073000},{"_id":"themes/next/README.md","hash":"8ae619024365621114e7ec7ba1fae5833cbd0cb9","modified":1521703073000},{"_id":"themes/next/_config.yml","hash":"4045bbb1c0130d1d25114742da3c7c4c3bf072e7","modified":1544510801463},{"_id":"themes/next/bower.json","hash":"b133dd92c7a825745a3b74474c2d738d9fd8ff07","modified":1521703073000},{"_id":"themes/next/crowdin.yml","hash":"fe22a450cc1272b7ac5476e6b33a999f8b8a2034","modified":1521703073000},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1521703073000},{"_id":"themes/next/package.json","hash":"77f15fd8e1bf54fe9e04513e38a70823225256cc","modified":1521703073000},{"_id":"source/_drafts/EventandProbability.md","hash":"955f691de75e879610d6c930f235e7462469b63c","modified":1524814361305},{"_id":"source/_drafts/adaptive-bloom-filter.md","hash":"aba3d2e6c25f960f34a4def4c2f278ac1207be4a","modified":1530428843381},{"_id":"source/_posts/DP1.md","hash":"6df4955066d6ef3e1746985efa1d5bc73743763e","modified":1529505231214},{"_id":"source/_posts/DiscreteRandomVariablesAndExpectation.md","hash":"231612e2f6e8fe53e97bd707cd9ca25743d2e5a5","modified":1528818620922},{"_id":"source/_posts/FirstBlog.md","hash":"1737f1762eb798df9c276c447cf133a59c46c1a9","modified":1524814361305},{"_id":"source/_posts/Github-Project.md","hash":"c1c8a4f8dd9792cfb574b20b01cbd1cdb7077458","modified":1526311085366},{"_id":"source/_posts/Letter-Combinations-of-a-Phone-Number.md","hash":"8170b473e34084bef44c015944a669c331caa757","modified":1535631214193},{"_id":"source/_posts/leetcode753.md","hash":"d5365f3aef13828255d0728a5f3db9a49eb17eb6","modified":1535635218084},{"_id":"source/_posts/python0.md","hash":"c558552554bbccd477e4c44ef7d4f359759c703b","modified":1540730054313},{"_id":"source/_posts/python1.md","hash":"9279dff04c0774995728785cef0260ad4f488af4","modified":1544079402397},{"_id":"source/_posts/python2.md","hash":"e43dc0b3a155292fe8afc0ae84481a8807c8e890","modified":1544103586225},{"_id":"source/categories/index.md","hash":"18b0b2d04d81bf7a5e7c20e15aab5862ce42e107","modified":1526294164345},{"_id":"source/images/.DS_Store","hash":"fbb9cd1f600aa0c189d3fd8aa7e0bcda8de183da","modified":1526014767218},{"_id":"source/images/leetcode17_1.png","hash":"61b9d0589157ce190e6f5bf9b503b4a4deefc0dc","modified":1524814361306},{"_id":"source/images/leetcode753_1.png","hash":"59cb11c30e0fbc634d2be79e1810a8aeb62b69e3","modified":1535630394354},{"_id":"source/images/leetcode753_2.png","hash":"4502ebdca670d34e88d6283ca9f7678f7d928150","modified":1535634839119},{"_id":"source/tags/index.md","hash":"bd4c9cb3dfe02b2698c0ba73847cdd4a6c2d3742","modified":1526294161738},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"476c9bb6616818be9d86567ad4e2e539c0e0da2f","modified":1521703073000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1521703073000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"7abbb4c8a29b2c14e576a00f53dbc0b4f5669c13","modified":1521703073000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1521703073000},{"_id":"themes/next/.github/stale.yml","hash":"1bbdd20d025010ec57225712be82988a26485836","modified":1521703073000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1521703073000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1521703073000},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1521703073000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1521703073000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1521703073000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"9f90a1a2df8c54edd3c8d99714ef0ce175983938","modified":1521703073000},{"_id":"themes/next/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1521703073000},{"_id":"themes/next/docs/MATH.md","hash":"d047b8a3d9aa49b478a33e5a326195d460cb4589","modified":1521703073000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1521703073000},{"_id":"themes/next/layout/_layout.swig","hash":"5803acd1f338db83a3b8d99eebbf163083e02520","modified":1521703073000},{"_id":"themes/next/layout/archive.swig","hash":"833a2213d31be45a12b8e4e5e609073978bd251b","modified":1521703073000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1521703073000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1521703073000},{"_id":"themes/next/layout/page.swig","hash":"3f9b2444f12251727ebbc28159f02e9e9489742e","modified":1521703073000},{"_id":"themes/next/layout/post.swig","hash":"8e2d079b46076996cc9343213d5bf7da8178d32d","modified":1521703073000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1521703073000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1521703073000},{"_id":"themes/next/languages/_en.yml","hash":"2397256c752276df666c1ff579902abb367b2380","modified":1521703073000},{"_id":"themes/next/languages/ar.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521703073000},{"_id":"themes/next/languages/bg.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521703073000},{"_id":"themes/next/languages/bn.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521703073000},{"_id":"themes/next/languages/cs.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521703073000},{"_id":"themes/next/languages/da.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521703073000},{"_id":"themes/next/languages/de.yml","hash":"f4dc655d4bd396b9c309da2a99b42c0456c3fe16","modified":1521703073000},{"_id":"themes/next/languages/el.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521703073000},{"_id":"themes/next/languages/es.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521703073000},{"_id":"themes/next/languages/et.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521703073000},{"_id":"themes/next/languages/fa.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521703073000},{"_id":"themes/next/languages/fi.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521703073000},{"_id":"themes/next/languages/fr.yml","hash":"dacb82b46d7b79656cdb75768a031fa73f178477","modified":1521703073000},{"_id":"themes/next/languages/he.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521703073000},{"_id":"themes/next/languages/hi.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521703073000},{"_id":"themes/next/languages/hr.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521703073000},{"_id":"themes/next/languages/hu.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521703073000},{"_id":"themes/next/languages/id.yml","hash":"c89ef3ed946a150f052f470f71393db6a6d3acaa","modified":1521703073000},{"_id":"themes/next/languages/it.yml","hash":"f0fb26ab84e5d0508ddc07bd67d581033520bb43","modified":1521703073000},{"_id":"themes/next/languages/ja.yml","hash":"02029ef467628369a88d1022746b861dca3fb921","modified":1521703073000},{"_id":"themes/next/languages/jv.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521703073000},{"_id":"themes/next/languages/ko.yml","hash":"c95a00066bda4c04ce7bf65f8bf08e82c4d8fbcf","modified":1521703073000},{"_id":"themes/next/languages/lt.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521703073000},{"_id":"themes/next/languages/lv.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521703073000},{"_id":"themes/next/languages/ms.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521703073000},{"_id":"themes/next/languages/nl.yml","hash":"8fc1165a138081d25ff4c171dea2980ce71fe2b0","modified":1521703073000},{"_id":"themes/next/languages/no.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521703073000},{"_id":"themes/next/languages/pa.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521703073000},{"_id":"themes/next/languages/pl.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521703073000},{"_id":"themes/next/languages/pt-BR.yml","hash":"268188db09c6779a570c8fc647ccc1a73322476c","modified":1521703073000},{"_id":"themes/next/languages/pt.yml","hash":"d8898007460ec50eb9969ba38d1b030613260ce7","modified":1521703073000},{"_id":"themes/next/languages/ro.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521703073000},{"_id":"themes/next/languages/ru.yml","hash":"26ae39b50887dcf0bf3ca3d820e5382fc11cc996","modified":1521703073000},{"_id":"themes/next/languages/sl.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521703073000},{"_id":"themes/next/languages/sr.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521703073000},{"_id":"themes/next/languages/sv.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521703073000},{"_id":"themes/next/languages/th.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521703073000},{"_id":"themes/next/languages/tr.yml","hash":"efc298288935bf892efc9707b1ae4ea92d5fb7b4","modified":1521703073000},{"_id":"themes/next/languages/uk.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521703073000},{"_id":"themes/next/languages/vi.yml","hash":"7792081d90122327f913f224f31965460936df5a","modified":1521703073000},{"_id":"themes/next/languages/zh-CN.yml","hash":"182c3915292297c82a862b4c87dd5847e87a3c17","modified":1521703073000},{"_id":"themes/next/languages/zh-HK.yml","hash":"f7b3304e44959f74149a01d5f140fef64bfb3fa1","modified":1521703073000},{"_id":"themes/next/languages/zh-TW.yml","hash":"1f025215f1ac03dd4db9b4f87aa393ee43494bc3","modified":1521703073000},{"_id":"themes/next/scripts/merge-configs.js","hash":"ca9845dc76f5710b4c6fba5fe25ff0d2fcf0adaa","modified":1521703073000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1521703073000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1521703073000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1521703073000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1521703073000},{"_id":"source/images/leetcode17_2.png","hash":"a3507576d5b8062ee50d4905d94fa057562cb7e8","modified":1526014713829},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521703073000},{"_id":"source/images/github_project/1.png","hash":"67652b767166902aa54a229f030b7f2f0dc5de52","modified":1525845192683},{"_id":"source/images/github_project/3.png","hash":"a7a5b526510a3154148fde3986f40e412138705d","modified":1525845696097},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1521703073000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1521703073000},{"_id":"themes/next/docs/ru/README.md","hash":"ff13616581bab8c836505e11bd425a6cbf0ce4ff","modified":1521703073000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1521703073000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1521703073000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"98ef4dc1a7a12320211ffb36d264cd86ffcce0dd","modified":1521703073000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1521703073000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1521703073000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"cbb419ccef174ef1a3fff5fc74261c600fdeec0e","modified":1521703073000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"1c7df019737656fdfd8d124c7c045a64ac8a2a8d","modified":1521703073000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"24753b3ddc287519252a25ee0496e83db4720ad6","modified":1521703073000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"c1ba919f70efe87a39e6217883e1625af0b2c23c","modified":1521703073000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1521703073000},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1521703073000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1521703073000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1521703073000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"464082e431ea5b06df782d5f312ee25be9e5f169","modified":1521703073000},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"08fe30ce8909b920540231e36c97e28cfbce62b6","modified":1521703073000},{"_id":"themes/next/layout/_macro/post.swig","hash":"7b85cd74fe673d1c842e705a18ae2e2e04f5d391","modified":1521703073000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"aa620c582143f43ba1cb1a5e59240041a911185b","modified":1521703073000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"355ddd5b8af696f7bffb183addd7e84c0a4e2123","modified":1521703073000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"fea45ab314b9ea23edab25c2b8620f909d856b1d","modified":1521703073000},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"6994d891e064f10607bce23f6e2997db7994010e","modified":1521703073000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5df32b286a8265ba82a4ef5e1439ff34751545ad","modified":1521703073000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"f62e6198dcc41b1cb6a1036094e724065d4e4008","modified":1521703073000},{"_id":"themes/next/layout/_partials/header.swig","hash":"6bdae92508fb5009b023386341f3b161a4ac6c70","modified":1521703073000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1aaf32bed57b976c4c1913fd801be34d4838cc72","modified":1521703073000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1521703073000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1521703073000},{"_id":"themes/next/layout/_partials/sub-menu.swig","hash":"9783a9569fe8344ed287013156e52ca1b0a25544","modified":1521703073000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1521703073000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1521703073000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"ac3ad2c0eccdf16edaa48816d111aaf51200a54b","modified":1521703073000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e0bdc723d1dc858b41fd66e44e2786e6519f259f","modified":1521703073000},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"60001c8e08b21bf3a7afaf029839e1455340e95d","modified":1521703073000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1521703073000},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"cabd9640dc3027a0b3ac06f5ebce777e50754065","modified":1521703073000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1521703073000},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"6b75c5fd76ae7cf0a7b04024510bd5221607eab3","modified":1521703073000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1521703073000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1521703073000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1521703073000},{"_id":"themes/next/scripts/tags/button.js","hash":"5a61c2da25970a4981fbd65f4a57c5e85db4dcda","modified":1521703073000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"db70a841e7c1708f95ca97b44413b526b267fa9b","modified":1521703073000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"2b3a4dc15dea33972c0b6d46a1483dabbf06fb5b","modified":1521703073000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"a98fc19a90924f2368e1982f8c449cbc09df8439","modified":1521703073000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"1b97b1b5364945b8ab3e50813bef84273055234f","modified":1521703073000},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"b7600f6b868d8f4f7032126242d9738cd1e6ad71","modified":1521703073000},{"_id":"themes/next/scripts/tags/label.js","hash":"621004f2836040b12c4e8fef77e62cf22c561297","modified":1521703073000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"460e5e1f305847dcd4bcab9da2038a85f0a1c273","modified":1521703073000},{"_id":"themes/next/scripts/tags/note.js","hash":"4975d4433e11161b2e9a5744b7287c2d667b3c76","modified":1521703073000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1521703073000},{"_id":"themes/next/source/css/main.styl","hash":"c26ca6e7b5bd910b9046d6722c8e00be672890e0","modified":1521703073000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1521703073000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1521703073000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1521703073000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1521703073000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1521703073000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1521703073000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1521703073000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1521703073000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1521703073000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1521703073000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1521703073000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1521703073000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1521703073000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1521703073000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1521703073000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1521703073000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1521703073000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1521703073000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521703073000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521703073000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521703073000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521703073000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521703073000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521703073000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521703073000},{"_id":"source/images/github_project/2.png","hash":"939682891d920b6a45e4a817c6e94f6ae589bed0","modified":1525845650726},{"_id":"themes/next/layout/_macro/menu/menu-badge-1.swig","hash":"7ffc5c159ab566805ceda6b8c7a4149a7e296116","modified":1521703073000},{"_id":"themes/next/layout/_macro/menu/menu-badge-2.swig","hash":"7b96a0e6079e845573338523cea4437817a4b1e1","modified":1521703073000},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"6a04cd1ef9ebac103d86b61505fa9b0f26268fdc","modified":1521703073000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1521703073000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"cd7e3331a61939c820e0437bf5d815cb0a42fefb","modified":1521703073000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"9f7aa33a620aea6ede1fb907b61fd071c018c525","modified":1521703073000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1521703073000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1521703073000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1521703073000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1521703073000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1521703073000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1521703073000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1521703073000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1521703073000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1521703073000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1521703073000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1521703073000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1521703073000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1521703073000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"67f0cb55e6702c492e99a9f697827629da036a0c","modified":1521703073000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1521703073000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1521703073000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"94b26dfbcd1cf2eb87dd9752d58213338926af27","modified":1521703073000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"beb53371c035b62e1a2c7bb76c63afbb595fe6e5","modified":1521703073000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1521703073000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"cee047575ae324398025423696b760db64d04e6f","modified":1521703073000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1521703073000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1521703073000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1521703073000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1521703073000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"2fbee33a4ccd7c8217c73e85a9a1488170e05629","modified":1521703073000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"fe8177e4698df764e470354b6acde8292a3515e0","modified":1521703073000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"17a54796f6e03fc834880a58efca45c286e40e40","modified":1521703073000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"40e3cacbd5fa5f2948d0179eff6dd88053e8648e","modified":1521703073000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"6f340d122a9816ccdf4b45b662880a4b2d087671","modified":1521703073000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"c0eb6123464d745ac5324ce6deac8ded601f432f","modified":1521703073000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"42f62695029834d45934705c619035733762309e","modified":1521703073000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a6fc00ec7f5642aabd66aa1cf51c6acc5b10e012","modified":1521703073000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"97dbc2035bcb5aa7eafb80a4202dc827cce34983","modified":1521703073000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"011ae6303afacddabc4ddf570fe3dd227569cd4f","modified":1521703073000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1521703073000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b15e10abe85b4270860a56c970b559baa258b2a8","modified":1521703073000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1521703073000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1521703073000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1521703073000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1521703073000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1521703073000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"81ca13d6d0beff8b1a4b542a51e3b0fb68f08efd","modified":1521703073000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"7a2706304465b9e673d5561b715e7c72a238437c","modified":1521703073000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1521703073000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"32392d213f5d05bc26b2dc452f2fc6fea9d44f6d","modified":1521703073000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"cfb03ec629f13883509eac66e561e9dba562333f","modified":1521703073000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1521703073000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1521703073000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"531cdedd7fbe8cb1dab2e4328774a9f6b15b59da","modified":1521703073000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1521703073000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1521703073000},{"_id":"themes/next/source/js/src/motion.js","hash":"50e57f8acb6924c6999cdcc664ddd3f0730d2061","modified":1521703073000},{"_id":"themes/next/source/js/src/post-details.js","hash":"d1333fb588d4521b4d1e9c69aef06e0ad1bf0b12","modified":1521703073000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1521703073000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1521703073000},{"_id":"themes/next/source/js/src/utils.js","hash":"bb67eb5b5f301a92503c81b1f8edd2a4d1fcc879","modified":1521703073000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1521703073000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1521703073000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1521703073000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1521703073000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1521703073000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1521703073000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1521703073000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1521703073000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1521703073000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1521703073000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1521703073000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1521703073000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"18309b68ff33163a6f76a39437e618bb6ed411f8","modified":1521703073000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1521703073000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1521703073000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1521703073000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1521703073000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"0810e7c43d6c8adc8434a8fa66eabe0436ab8178","modified":1521703073000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"f362fbc791dafb378807cabbc58abf03e097af6d","modified":1521703073000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1521703073000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1521703073000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1521703073000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f43c821ea272f80703862260b140932fe4aa0e1f","modified":1521703073000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1521703073000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1521703073000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"5e12572b18846250e016a872a738026478ceef37","modified":1521703073000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1521703073000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1521703073000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"35f093fe4c1861661ac1542d6e8ea5a9bbfeb659","modified":1521703073000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1521703073000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1521703073000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1521703073000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"ba1842dbeb97e46c6c4d2ae0e7a2ca6d610ada67","modified":1521703073000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"05a5abf02e84ba8f639b6f9533418359f0ae4ecb","modified":1521703073000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1521703073000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"41f9cdafa00e256561c50ae0b97ab7fcd7c1d6a2","modified":1521703073000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"a863f2c8bae1fbccdc181a5d178b808cd80c5b5e","modified":1521703073000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1521703073000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1521703073000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1521703073000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1521703073000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1521703073000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1521703073000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1521703073000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"39dee82d481dd9d44e33658960ec63e47cd0a715","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ee37e6c465b9b2a7e39175fccfcbed14f2db039b","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"17b95828f9db7f131ec0361a8c0e89b0b5c9bff5","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"7dd9a0378ccff3e4a2003f486b1a34e74c20dac6","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ca89b167d368eac50a4f808fa53ba67e69cbef94","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"0b57ca04dc3998cf70bb90d777b0db05f3928b82","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"8bf095377d28881f63a30bd7db97526829103bf2","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"4427ed3250483ed5b7baad74fa93474bd1eda729","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"43bc58daa8d35d5d515dc787ceb21dd77633fe49","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"5d15cc8bbefe44c77a9b9f96bf04a6033a4b35b8","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"10e9bb3392826a5a8f4cabfc14c6d81645f33fe6","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"76937db9702053d772f6758d9cea4088c2a6e2a3","modified":1521703073000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1c06be422bc41fd35e5c7948cdea2c09961207f6","modified":1521703073000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1521703073000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1521703073000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1521703073000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1521703073000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1521703073000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1521703073000}],"Category":[{"name":"Computer Science","_id":"cjpjdw5ef0006h711fm5t28kl"},{"name":"Math","_id":"cjpjdw5ej000ch711862uv0qv"},{"name":"Engineer","_id":"cjpjdw5et000lh7115e35p5wn"},{"name":"Leetcode","_id":"cjpjdw5eu000sh711elrke1di"}],"Data":[],"Page":[{"title":"categories","date":"2014-12-22T03:39:04.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2014-12-22 12:39:04\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-05-14T10:36:04.345Z","path":"categories/index.html","layout":"page","_id":"cjpjdw5eb0001h711wg3bc2nj","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tage","date":"2014-12-22T03:39:04.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tage\ndate: 2014-12-22 12:39:04\ntype: \"tags\"\ncomments: false\n---\n","updated":"2018-05-14T10:36:01.738Z","path":"tags/index.html","layout":"page","_id":"cjpjdw5ed0003h711s4v28oh5","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Event and Probability","_content":"","source":"_drafts/EventandProbability.md","raw":"---\ntitle: Event and Probability\ntags: Mathmatics\n---\n","slug":"EventandProbability","published":0,"date":"2018-04-27T07:32:41.305Z","updated":"2018-04-27T07:32:41.305Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpjdw5e70000h711oblcr1f8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Knapsack and Adaptive Bloom Filter","_content":"\n**Bloom Filter** is a space-efficient data structure, which offers constant time method to test whether an element is a member of a set. The false is always correct, but if it returns a *True*, there's a possibility for that to be a \"False Positive\". Here, we start from a classic problem called **\"Knapsack Problem\"**, and we'll show you how to optimize the Bloom filter from the \"Knapsack Problem\".\n\n# Knapsack Problem\n## Definition\nHere we have a knapsack, whose capability of weight is $W$, and we have $n$ gold bricks, whose weights ad denoted by $w_1,...w_n$. We want to carry as much gold as possible, \n\n*Input:*\n\n    Positive integer n\n\n$$\n\\begin{aligned}\n    &\\underline{Input:}\\     &&Positive\\ integer\\ n\\ (number\\ of\\ gold\\ bricks.) \\\\\n                            &&&Positive\\ real\\ numbers\\ w_1,...,w_n\\ (weight\\ of\\ each\\ gold\\ bricks.) \\\\\n                            &&&Positive\\ real\\ number\\ W\\ (maximum\\ weight\\ our\\ knapsack\\ can\\ carry.) \\\\\n                            &&&\\underline{Assumption:}\\ w_1 < w_2 < ... < w_n \\\\\n    &\\underline{Output:}\\    &&Set\\ S\\subseteq \\{1,...,n\\}\\ (set\\ of\\ brick\\                            we\\ take.) \\\\\n    &\\underline{Constraint:}&&\\sum_{i\\in S}w_i\\ (maximize\\ the\\ weight\\ of\\ gold\\ we\\ take.)\n\n    \n\\end{aligned}\n$$\n\nFor example, when $n=5,w_1=2,w_2=5,w_3=5,w_4=6,w_5=9,W=10$, the brick we should take with us should be brick 2 for brick 3, and $w_2+w_3=10=W$, then the best output is $S=\\{2,3\\}$. For any output that equals the best output value is called an *\"Optimal Solutions\"*. The best objective value (optimal value) is denoted as *OPT*, sometimes we also denote the optimal solution by $S^*$.\n\nThe above question is the simplified version of a problem called knapsack. The problem is known to be NP-hard even for the simplified version.\n\n## Algorithm\nHere we have an algorithm for the simplified version of knapsack problem.\n\n    S = empty\n    For j = i to n:\n        If sum(S)+w[j] <= W:\n            S.add(w[j])\n        Else:\n            if w[j] >= sum(S):\n                S=w[j]\n            break;\n\nFrom","source":"_drafts/adaptive-bloom-filter.md","raw":"---\ntitle: Knapsack and Adaptive Bloom Filter\ntags: \n    - Computer Science\n    - Algorithm\ncategories: Computer Science\n---\n\n**Bloom Filter** is a space-efficient data structure, which offers constant time method to test whether an element is a member of a set. The false is always correct, but if it returns a *True*, there's a possibility for that to be a \"False Positive\". Here, we start from a classic problem called **\"Knapsack Problem\"**, and we'll show you how to optimize the Bloom filter from the \"Knapsack Problem\".\n\n# Knapsack Problem\n## Definition\nHere we have a knapsack, whose capability of weight is $W$, and we have $n$ gold bricks, whose weights ad denoted by $w_1,...w_n$. We want to carry as much gold as possible, \n\n*Input:*\n\n    Positive integer n\n\n$$\n\\begin{aligned}\n    &\\underline{Input:}\\     &&Positive\\ integer\\ n\\ (number\\ of\\ gold\\ bricks.) \\\\\n                            &&&Positive\\ real\\ numbers\\ w_1,...,w_n\\ (weight\\ of\\ each\\ gold\\ bricks.) \\\\\n                            &&&Positive\\ real\\ number\\ W\\ (maximum\\ weight\\ our\\ knapsack\\ can\\ carry.) \\\\\n                            &&&\\underline{Assumption:}\\ w_1 < w_2 < ... < w_n \\\\\n    &\\underline{Output:}\\    &&Set\\ S\\subseteq \\{1,...,n\\}\\ (set\\ of\\ brick\\                            we\\ take.) \\\\\n    &\\underline{Constraint:}&&\\sum_{i\\in S}w_i\\ (maximize\\ the\\ weight\\ of\\ gold\\ we\\ take.)\n\n    \n\\end{aligned}\n$$\n\nFor example, when $n=5,w_1=2,w_2=5,w_3=5,w_4=6,w_5=9,W=10$, the brick we should take with us should be brick 2 for brick 3, and $w_2+w_3=10=W$, then the best output is $S=\\{2,3\\}$. For any output that equals the best output value is called an *\"Optimal Solutions\"*. The best objective value (optimal value) is denoted as *OPT*, sometimes we also denote the optimal solution by $S^*$.\n\nThe above question is the simplified version of a problem called knapsack. The problem is known to be NP-hard even for the simplified version.\n\n## Algorithm\nHere we have an algorithm for the simplified version of knapsack problem.\n\n    S = empty\n    For j = i to n:\n        If sum(S)+w[j] <= W:\n            S.add(w[j])\n        Else:\n            if w[j] >= sum(S):\n                S=w[j]\n            break;\n\nFrom","slug":"adaptive-bloom-filter","published":0,"date":"2018-07-01T06:40:28.456Z","updated":"2018-07-01T07:07:23.381Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpjdw5ec0002h7115zx6czw6","content":"<p><strong>Bloom Filter</strong> is a space-efficient data structure, which offers constant time method to test whether an element is a member of a set. The false is always correct, but if it returns a <em>True</em>, there&#39;s a possibility for that to be a &quot;False Positive&quot;. Here, we start from a classic problem called <strong>&quot;Knapsack Problem&quot;</strong>, and we&#39;ll show you how to optimize the Bloom filter from the &quot;Knapsack Problem&quot;.</p>\n<h1 id=\"knapsack-problem\"><a href=\"#Knapsack-Problem\" class=\"headerlink\" title=\"Knapsack Problem\"></a>Knapsack Problem</h1><h2 id=\"definition\"><a href=\"#Definition\" class=\"headerlink\" title=\"Definition\"></a>Definition</h2><p>Here we have a knapsack, whose capability of weight is $W$, and we have $n$ gold bricks, whose weights ad denoted by $w_1,...w_n$. We want to carry as much gold as possible, </p>\n<p><em>Input:</em></p>\n<pre><code>Positive integer n\n</code></pre><script type=\"math/tex; mode=display\">\n\\begin{aligned}\n    &\\underline{Input:}\\     &&Positive\\ integer\\ n\\ (number\\ of\\ gold\\ bricks.) \\\\\n                            &&&Positive\\ real\\ numbers\\ w_1,...,w_n\\ (weight\\ of\\ each\\ gold\\ bricks.) \\\\\n                            &&&Positive\\ real\\ number\\ W\\ (maximum\\ weight\\ our\\ knapsack\\ can\\ carry.) \\\\\n                            &&&\\underline{Assumption:}\\ w_1 < w_2 < ... < w_n \\\\\n    &\\underline{Output:}\\    &&Set\\ S\\subseteq \\{1,...,n\\}\\ (set\\ of\\ brick\\                            we\\ take.) \\\\\n    &\\underline{Constraint:}&&\\sum_{i\\in S}w_i\\ (maximize\\ the\\ weight\\ of\\ gold\\ we\\ take.)\n\n\n\\end{aligned}</script><p>For example, when $n=5,w_1=2,w_2=5,w_3=5,w_4=6,w_5=9,W=10$, the brick we should take with us should be brick 2 for brick 3, and $w_2+w_3=10=W$, then the best output is $S={2,3}$. For any output that equals the best output value is called an <em>&quot;Optimal Solutions&quot;</em>. The best objective value (optimal value) is denoted as <em>OPT</em>, sometimes we also denote the optimal solution by $S^*$.</p>\n<p>The above question is the simplified version of a problem called knapsack. The problem is known to be NP-hard even for the simplified version.</p>\n<h2 id=\"algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h2><p>Here we have an algorithm for the simplified version of knapsack problem.</p>\n<pre><code>S = empty\nFor j = i to n:\n    If sum(S)+w[j] &lt;= W:\n        S.add(w[j])\n    Else:\n        if w[j] &gt;= sum(S):\n            S=w[j]\n        break;\n</code></pre><p>From</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>Bloom Filter</strong> is a space-efficient data structure, which offers constant time method to test whether an element is a member of a set. The false is always correct, but if it returns a <em>True</em>, there&#39;s a possibility for that to be a &quot;False Positive&quot;. Here, we start from a classic problem called <strong>&quot;Knapsack Problem&quot;</strong>, and we&#39;ll show you how to optimize the Bloom filter from the &quot;Knapsack Problem&quot;.</p>\n<h1 id=\"Knapsack-Problem\"><a href=\"#Knapsack-Problem\" class=\"headerlink\" title=\"Knapsack Problem\"></a>Knapsack Problem</h1><h2 id=\"Definition\"><a href=\"#Definition\" class=\"headerlink\" title=\"Definition\"></a>Definition</h2><p>Here we have a knapsack, whose capability of weight is $W$, and we have $n$ gold bricks, whose weights ad denoted by $w_1,...w_n$. We want to carry as much gold as possible, </p>\n<p><em>Input:</em></p>\n<pre><code>Positive integer n\n</code></pre><script type=\"math/tex; mode=display\">\n\\begin{aligned}\n    &\\underline{Input:}\\     &&Positive\\ integer\\ n\\ (number\\ of\\ gold\\ bricks.) \\\\\n                            &&&Positive\\ real\\ numbers\\ w_1,...,w_n\\ (weight\\ of\\ each\\ gold\\ bricks.) \\\\\n                            &&&Positive\\ real\\ number\\ W\\ (maximum\\ weight\\ our\\ knapsack\\ can\\ carry.) \\\\\n                            &&&\\underline{Assumption:}\\ w_1 < w_2 < ... < w_n \\\\\n    &\\underline{Output:}\\    &&Set\\ S\\subseteq \\{1,...,n\\}\\ (set\\ of\\ brick\\                            we\\ take.) \\\\\n    &\\underline{Constraint:}&&\\sum_{i\\in S}w_i\\ (maximize\\ the\\ weight\\ of\\ gold\\ we\\ take.)\n\n\n\\end{aligned}</script><p>For example, when $n=5,w_1=2,w_2=5,w_3=5,w_4=6,w_5=9,W=10$, the brick we should take with us should be brick 2 for brick 3, and $w_2+w_3=10=W$, then the best output is $S={2,3}$. For any output that equals the best output value is called an <em>&quot;Optimal Solutions&quot;</em>. The best objective value (optimal value) is denoted as <em>OPT</em>, sometimes we also denote the optimal solution by $S^*$.</p>\n<p>The above question is the simplified version of a problem called knapsack. The problem is known to be NP-hard even for the simplified version.</p>\n<h2 id=\"Algorithm\"><a href=\"#Algorithm\" class=\"headerlink\" title=\"Algorithm\"></a>Algorithm</h2><p>Here we have an algorithm for the simplified version of knapsack problem.</p>\n<pre><code>S = empty\nFor j = i to n:\n    If sum(S)+w[j] &lt;= W:\n        S.add(w[j])\n    Else:\n        if w[j] &gt;= sum(S):\n            S=w[j]\n        break;\n</code></pre><p>From</p>\n"},{"title":"Dirichlet Process 1 - Bernoulli Process and Bayes Theorem","date":"2018-06-14T10:02:24.000Z","_content":"\n\n# What is Dirichlet Process\n\n**Dirichlet Process** is a concept in probability theory, in fact, they are a family of stochastic processes whose realizations (or observations) are probability distributions. It is often used in Bayesian inference to describe the prior knowledge about the distribution of random variables -- how likely it is that the random variables are distributed according to one or another particular distribution.\n\n# Why Dirichlet Process\n\nIn information search, NLP and many other fields, DP are widely used in topic models. Meanwhile, in the interpretability field, Dirichlet process has a very important property: It can be generalized into infinite dimensions, and keep itself still computable.\n\n---------------\nBefore we started our introduction to Dirichlet Process, I'd like to start with **Bernoulli Process** and **Beta Distribution**, for they are the two-dimension entrance of the relatively complex Dirichlet Distribution and Dirichlet Process.\n\n# Bernoulli Process\n\b\n**Bernoulli Trail**\n\n$$f(q)=\\{\n    \\begin{aligned}\n    0, && prob=q\\\\\n    1, && otherwise\n    \\end{aligned}  \n$$\n\nWe can consider this trail as tossing a coin, but this coin can be unbalanced, which means there's a possibility of $q (0\\leq q \\leq 1)$ to be head up, rather than 50%. We take head as $X=1$ and tail as $X=0$.\n\nAnd **Bernoulli Process** is repeating a series of independent Bernoulli trail. By repeating the Bernoulli trail n times, we record the counting of $X=0$ as k.\n\nNow consider a situation, that we wanted to know how unbalanced the coin is, so we tossed it n times and counted the k, now how do we find the probability of getting a head (which means $X=0$).\n\nWell we'd always hope we can toss it forever and at last $k/n$ would of course convergence to q. But in real life, in most cases we can not try it so many times. For instance, we can only toss the coin four times, and you get \"*head head tail tail*\". Well, here $k/n$ is absolutely unreliable, so we can just give it a guess, and that we can only say \"**it sounds more reasonable if q is a certain value in $[ 0,1]$**\". And we can not say \"Yes, it is the q value.\"\n\nConsider if we get *{head, head, tail, tail}* in our four trails, absolutely we'd say 0.5 would be a reasonable guess, and 0.2 or 0.8 would sound kind of unlikely to be, 0.05 and 0.95 would be totally a joke to most people.\n\nSo as guys who love math and computer science, we'd like to have some tools in math to describe this, like use a probability density function. Here we see another problem, we want to update this function based on the prior we already have if we keep trying and get new observations. Naturally, we'd feel **Bayes theorem** would fit this well, because Bayes can update probability with continuous observations, and every time we update all we need is the prior of the previous status. Now we describe this problem with a more formal language.\n\nWhen tossing a coin, we get a random sample $X=(x_1, x_2, ..., x_n)$, now we want to estimate the reasonable value of q in $[0,1]$ based on these n observations. Since we can't use a single certain value to describe q, we use a distribution function to do the job: a probability density function about q. Definitely we'd write this into a conditional probability distribution: $f(q|X)$, because we're guessing q under the condition of observing X.\n\nNow let's have a look a **Bayes Theorem**\"\n$$P(q|x)P(x)=P(X=x|q)P(q)$$\n\n$P(q)$ is the prior probability about q, $P(q|x)$ is the posterior probability. Notice that we are saying \"probability\" rather than \"probability density function\". In order to combine Bayes theorem with probability density function, we can get $f(q)$ from $P(q)$, then get $f(q|x)$ from $P(q|X)$.\n\nHere $P(x)$ is a constant value, so we can have a conclusion, that is **The posterior probability density function $f(q|x)$ of p is proportional to it's prior $f(q|X)$ times a conditional probability**, which is:\n$$f(q|x) \\sim P(X=x|p)f(q)$$\n\nWith this result, let's go back to the coin problem.\n\nBy tossing the coin n times, it would be a Bernoulli process,  so when q is constant, the result of the n times tossing are certain,and we get an observation of k times tail, we can describe it as $P(X=x|p)=q^k(1-q)^{n-k}$.\nSo $f(q|x)$ is proportional to prior and the conditional probability above, which we say:\n$$f(q|x) \\sim q^k(1-q)^{n-k}f(q)$$\n\nNow let's have a look at $f(q)$. Naturally, when we know nothing about the coin, we should consider the q can be any value in $[0,1]$. So we'd prefer to think $f(q)$ to be uniformly distributed in this interval, which is $f(q)=1$ for q in $$[0,1]$$.\n\nNow we can see in the formula $f(q|x) \\sim q^k(1-q)^{n-k}f(q)$. $q^k(1-q)^{n-k}$ times a $[0,1]$ uniform distribution would result in a **Beta Distribution**.\n\n# What's next\nIn this chapter we discussed the Bernoulli Process and how it was combined with Bayes Theorem, it may still look a little bit far from Dirichlet Process, but they are very fundamental knowledge and with a little bit variation, we will get our Dirichlet.\n\nIn the next chapter, we'll discuss about Beta Distribution, talk a little bit about an important property called **conjugate**, which indeed made Dirichlet process so important.","source":"_posts/DP1.md","raw":"---\ntitle: Dirichlet Process 1 - Bernoulli Process and Bayes Theorem\ntags:\n  - Mathematics\n  - Statistics\ncategories:\n  - Math\ndate: 2018-06-14 19:02:24\n---\n\n\n# What is Dirichlet Process\n\n**Dirichlet Process** is a concept in probability theory, in fact, they are a family of stochastic processes whose realizations (or observations) are probability distributions. It is often used in Bayesian inference to describe the prior knowledge about the distribution of random variables -- how likely it is that the random variables are distributed according to one or another particular distribution.\n\n# Why Dirichlet Process\n\nIn information search, NLP and many other fields, DP are widely used in topic models. Meanwhile, in the interpretability field, Dirichlet process has a very important property: It can be generalized into infinite dimensions, and keep itself still computable.\n\n---------------\nBefore we started our introduction to Dirichlet Process, I'd like to start with **Bernoulli Process** and **Beta Distribution**, for they are the two-dimension entrance of the relatively complex Dirichlet Distribution and Dirichlet Process.\n\n# Bernoulli Process\n\b\n**Bernoulli Trail**\n\n$$f(q)=\\{\n    \\begin{aligned}\n    0, && prob=q\\\\\n    1, && otherwise\n    \\end{aligned}  \n$$\n\nWe can consider this trail as tossing a coin, but this coin can be unbalanced, which means there's a possibility of $q (0\\leq q \\leq 1)$ to be head up, rather than 50%. We take head as $X=1$ and tail as $X=0$.\n\nAnd **Bernoulli Process** is repeating a series of independent Bernoulli trail. By repeating the Bernoulli trail n times, we record the counting of $X=0$ as k.\n\nNow consider a situation, that we wanted to know how unbalanced the coin is, so we tossed it n times and counted the k, now how do we find the probability of getting a head (which means $X=0$).\n\nWell we'd always hope we can toss it forever and at last $k/n$ would of course convergence to q. But in real life, in most cases we can not try it so many times. For instance, we can only toss the coin four times, and you get \"*head head tail tail*\". Well, here $k/n$ is absolutely unreliable, so we can just give it a guess, and that we can only say \"**it sounds more reasonable if q is a certain value in $[ 0,1]$**\". And we can not say \"Yes, it is the q value.\"\n\nConsider if we get *{head, head, tail, tail}* in our four trails, absolutely we'd say 0.5 would be a reasonable guess, and 0.2 or 0.8 would sound kind of unlikely to be, 0.05 and 0.95 would be totally a joke to most people.\n\nSo as guys who love math and computer science, we'd like to have some tools in math to describe this, like use a probability density function. Here we see another problem, we want to update this function based on the prior we already have if we keep trying and get new observations. Naturally, we'd feel **Bayes theorem** would fit this well, because Bayes can update probability with continuous observations, and every time we update all we need is the prior of the previous status. Now we describe this problem with a more formal language.\n\nWhen tossing a coin, we get a random sample $X=(x_1, x_2, ..., x_n)$, now we want to estimate the reasonable value of q in $[0,1]$ based on these n observations. Since we can't use a single certain value to describe q, we use a distribution function to do the job: a probability density function about q. Definitely we'd write this into a conditional probability distribution: $f(q|X)$, because we're guessing q under the condition of observing X.\n\nNow let's have a look a **Bayes Theorem**\"\n$$P(q|x)P(x)=P(X=x|q)P(q)$$\n\n$P(q)$ is the prior probability about q, $P(q|x)$ is the posterior probability. Notice that we are saying \"probability\" rather than \"probability density function\". In order to combine Bayes theorem with probability density function, we can get $f(q)$ from $P(q)$, then get $f(q|x)$ from $P(q|X)$.\n\nHere $P(x)$ is a constant value, so we can have a conclusion, that is **The posterior probability density function $f(q|x)$ of p is proportional to it's prior $f(q|X)$ times a conditional probability**, which is:\n$$f(q|x) \\sim P(X=x|p)f(q)$$\n\nWith this result, let's go back to the coin problem.\n\nBy tossing the coin n times, it would be a Bernoulli process,  so when q is constant, the result of the n times tossing are certain,and we get an observation of k times tail, we can describe it as $P(X=x|p)=q^k(1-q)^{n-k}$.\nSo $f(q|x)$ is proportional to prior and the conditional probability above, which we say:\n$$f(q|x) \\sim q^k(1-q)^{n-k}f(q)$$\n\nNow let's have a look at $f(q)$. Naturally, when we know nothing about the coin, we should consider the q can be any value in $[0,1]$. So we'd prefer to think $f(q)$ to be uniformly distributed in this interval, which is $f(q)=1$ for q in $$[0,1]$$.\n\nNow we can see in the formula $f(q|x) \\sim q^k(1-q)^{n-k}f(q)$. $q^k(1-q)^{n-k}$ times a $[0,1]$ uniform distribution would result in a **Beta Distribution**.\n\n# What's next\nIn this chapter we discussed the Bernoulli Process and how it was combined with Bayes Theorem, it may still look a little bit far from Dirichlet Process, but they are very fundamental knowledge and with a little bit variation, we will get our Dirichlet.\n\nIn the next chapter, we'll discuss about Beta Distribution, talk a little bit about an important property called **conjugate**, which indeed made Dirichlet process so important.","slug":"DP1","published":1,"updated":"2018-06-20T14:33:51.214Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpjdw5ee0005h7112hy2309f","content":"<h1 id=\"what-is-dirichlet-process\"><a href=\"#What-is-Dirichlet-Process\" class=\"headerlink\" title=\"What is Dirichlet Process\"></a>What is Dirichlet Process</h1><p><strong>Dirichlet Process</strong> is a concept in probability theory, in fact, they are a family of stochastic processes whose realizations (or observations) are probability distributions. It is often used in Bayesian inference to describe the prior knowledge about the distribution of random variables -- how likely it is that the random variables are distributed according to one or another particular distribution.</p>\n<h1 id=\"why-dirichlet-process\"><a href=\"#Why-Dirichlet-Process\" class=\"headerlink\" title=\"Why Dirichlet Process\"></a>Why Dirichlet Process</h1><p>In information search, NLP and many other fields, DP are widely used in topic models. Meanwhile, in the interpretability field, Dirichlet process has a very important property: It can be generalized into infinite dimensions, and keep itself still computable.</p>\n<hr>\n<p>Before we started our introduction to Dirichlet Process, I&#39;d like to start with <strong>Bernoulli Process</strong> and <strong>Beta Distribution</strong>, for they are the two-dimension entrance of the relatively complex Dirichlet Distribution and Dirichlet Process.</p>\n<h1 id=\"bernoulli-process\"><a href=\"#Bernoulli-Process\" class=\"headerlink\" title=\"Bernoulli Process\"></a>Bernoulli Process</h1><p>\b<br><strong>Bernoulli Trail</strong></p>\n<script type=\"math/tex; mode=display\">f(q)=\\{\n    \\begin{aligned}\n    0, && prob=q\\\\\n    1, && otherwise\n    \\end{aligned}</script><p>We can consider this trail as tossing a coin, but this coin can be unbalanced, which means there&#39;s a possibility of $q (0\\leq q \\leq 1)$ to be head up, rather than 50%. We take head as $X=1$ and tail as $X=0$.</p>\n<p>And <strong>Bernoulli Process</strong> is repeating a series of independent Bernoulli trail. By repeating the Bernoulli trail n times, we record the counting of $X=0$ as k.</p>\n<p>Now consider a situation, that we wanted to know how unbalanced the coin is, so we tossed it n times and counted the k, now how do we find the probability of getting a head (which means $X=0$).</p>\n<p>Well we&#39;d always hope we can toss it forever and at last $k/n$ would of course convergence to q. But in real life, in most cases we can not try it so many times. For instance, we can only toss the coin four times, and you get &quot;<em>head head tail tail</em>&quot;. Well, here $k/n$ is absolutely unreliable, so we can just give it a guess, and that we can only say &quot;<strong>it sounds more reasonable if q is a certain value in $[ 0,1]$</strong>&quot;. And we can not say &quot;Yes, it is the q value.&quot;</p>\n<p>Consider if we get <em>{head, head, tail, tail}</em> in our four trails, absolutely we&#39;d say 0.5 would be a reasonable guess, and 0.2 or 0.8 would sound kind of unlikely to be, 0.05 and 0.95 would be totally a joke to most people.</p>\n<p>So as guys who love math and computer science, we&#39;d like to have some tools in math to describe this, like use a probability density function. Here we see another problem, we want to update this function based on the prior we already have if we keep trying and get new observations. Naturally, we&#39;d feel <strong>Bayes theorem</strong> would fit this well, because Bayes can update probability with continuous observations, and every time we update all we need is the prior of the previous status. Now we describe this problem with a more formal language.</p>\n<p>When tossing a coin, we get a random sample $X=(x_1, x_2, ..., x_n)$, now we want to estimate the reasonable value of q in $[0,1]$ based on these n observations. Since we can&#39;t use a single certain value to describe q, we use a distribution function to do the job: a probability density function about q. Definitely we&#39;d write this into a conditional probability distribution: $f(q|X)$, because we&#39;re guessing q under the condition of observing X.</p>\n<p>Now let&#39;s have a look a <strong>Bayes Theorem</strong>&quot;</p>\n<script type=\"math/tex; mode=display\">P(q|x)P(x)=P(X=x|q)P(q)</script><p>$P(q)$ is the prior probability about q, $P(q|x)$ is the posterior probability. Notice that we are saying &quot;probability&quot; rather than &quot;probability density function&quot;. In order to combine Bayes theorem with probability density function, we can get $f(q)$ from $P(q)$, then get $f(q|x)$ from $P(q|X)$.</p>\n<p>Here $P(x)$ is a constant value, so we can have a conclusion, that is <strong>The posterior probability density function $f(q|x)$ of p is proportional to it&#39;s prior $f(q|X)$ times a conditional probability</strong>, which is:</p>\n<script type=\"math/tex; mode=display\">f(q|x) \\sim P(X=x|p)f(q)</script><p>With this result, let&#39;s go back to the coin problem.</p>\n<p>By tossing the coin n times, it would be a Bernoulli process,  so when q is constant, the result of the n times tossing are certain,and we get an observation of k times tail, we can describe it as $P(X=x|p)=q^k(1-q)^{n-k}$.<br>So $f(q|x)$ is proportional to prior and the conditional probability above, which we say:</p>\n<script type=\"math/tex; mode=display\">f(q|x) \\sim q^k(1-q)^{n-k}f(q)</script><p>Now let&#39;s have a look at $f(q)$. Naturally, when we know nothing about the coin, we should consider the q can be any value in $[0,1]$. So we&#39;d prefer to think $f(q)$ to be uniformly distributed in this interval, which is $f(q)=1$ for q in <script type=\"math/tex\">[0,1]</script>.</p>\n<p>Now we can see in the formula $f(q|x) \\sim q^k(1-q)^{n-k}f(q)$. $q^k(1-q)^{n-k}$ times a $[0,1]$ uniform distribution would result in a <strong>Beta Distribution</strong>.</p>\n<h1 id=\"what39s-next\"><a href=\"#What-39-s-next\" class=\"headerlink\" title=\"What&#39;s next\"></a>What&#39;s next</h1><p>In this chapter we discussed the Bernoulli Process and how it was combined with Bayes Theorem, it may still look a little bit far from Dirichlet Process, but they are very fundamental knowledge and with a little bit variation, we will get our Dirichlet.</p>\n<p>In the next chapter, we&#39;ll discuss about Beta Distribution, talk a little bit about an important property called <strong>conjugate</strong>, which indeed made Dirichlet process so important.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"What-is-Dirichlet-Process\"><a href=\"#What-is-Dirichlet-Process\" class=\"headerlink\" title=\"What is Dirichlet Process\"></a>What is Dirichlet Process</h1><p><strong>Dirichlet Process</strong> is a concept in probability theory, in fact, they are a family of stochastic processes whose realizations (or observations) are probability distributions. It is often used in Bayesian inference to describe the prior knowledge about the distribution of random variables -- how likely it is that the random variables are distributed according to one or another particular distribution.</p>\n<h1 id=\"Why-Dirichlet-Process\"><a href=\"#Why-Dirichlet-Process\" class=\"headerlink\" title=\"Why Dirichlet Process\"></a>Why Dirichlet Process</h1><p>In information search, NLP and many other fields, DP are widely used in topic models. Meanwhile, in the interpretability field, Dirichlet process has a very important property: It can be generalized into infinite dimensions, and keep itself still computable.</p>\n<hr>\n<p>Before we started our introduction to Dirichlet Process, I&#39;d like to start with <strong>Bernoulli Process</strong> and <strong>Beta Distribution</strong>, for they are the two-dimension entrance of the relatively complex Dirichlet Distribution and Dirichlet Process.</p>\n<h1 id=\"Bernoulli-Process\"><a href=\"#Bernoulli-Process\" class=\"headerlink\" title=\"Bernoulli Process\"></a>Bernoulli Process</h1><p>\b<br><strong>Bernoulli Trail</strong></p>\n<script type=\"math/tex; mode=display\">f(q)=\\{\n    \\begin{aligned}\n    0, && prob=q\\\\\n    1, && otherwise\n    \\end{aligned}</script><p>We can consider this trail as tossing a coin, but this coin can be unbalanced, which means there&#39;s a possibility of $q (0\\leq q \\leq 1)$ to be head up, rather than 50%. We take head as $X=1$ and tail as $X=0$.</p>\n<p>And <strong>Bernoulli Process</strong> is repeating a series of independent Bernoulli trail. By repeating the Bernoulli trail n times, we record the counting of $X=0$ as k.</p>\n<p>Now consider a situation, that we wanted to know how unbalanced the coin is, so we tossed it n times and counted the k, now how do we find the probability of getting a head (which means $X=0$).</p>\n<p>Well we&#39;d always hope we can toss it forever and at last $k/n$ would of course convergence to q. But in real life, in most cases we can not try it so many times. For instance, we can only toss the coin four times, and you get &quot;<em>head head tail tail</em>&quot;. Well, here $k/n$ is absolutely unreliable, so we can just give it a guess, and that we can only say &quot;<strong>it sounds more reasonable if q is a certain value in $[ 0,1]$</strong>&quot;. And we can not say &quot;Yes, it is the q value.&quot;</p>\n<p>Consider if we get <em>{head, head, tail, tail}</em> in our four trails, absolutely we&#39;d say 0.5 would be a reasonable guess, and 0.2 or 0.8 would sound kind of unlikely to be, 0.05 and 0.95 would be totally a joke to most people.</p>\n<p>So as guys who love math and computer science, we&#39;d like to have some tools in math to describe this, like use a probability density function. Here we see another problem, we want to update this function based on the prior we already have if we keep trying and get new observations. Naturally, we&#39;d feel <strong>Bayes theorem</strong> would fit this well, because Bayes can update probability with continuous observations, and every time we update all we need is the prior of the previous status. Now we describe this problem with a more formal language.</p>\n<p>When tossing a coin, we get a random sample $X=(x_1, x_2, ..., x_n)$, now we want to estimate the reasonable value of q in $[0,1]$ based on these n observations. Since we can&#39;t use a single certain value to describe q, we use a distribution function to do the job: a probability density function about q. Definitely we&#39;d write this into a conditional probability distribution: $f(q|X)$, because we&#39;re guessing q under the condition of observing X.</p>\n<p>Now let&#39;s have a look a <strong>Bayes Theorem</strong>&quot;</p>\n<script type=\"math/tex; mode=display\">P(q|x)P(x)=P(X=x|q)P(q)</script><p>$P(q)$ is the prior probability about q, $P(q|x)$ is the posterior probability. Notice that we are saying &quot;probability&quot; rather than &quot;probability density function&quot;. In order to combine Bayes theorem with probability density function, we can get $f(q)$ from $P(q)$, then get $f(q|x)$ from $P(q|X)$.</p>\n<p>Here $P(x)$ is a constant value, so we can have a conclusion, that is <strong>The posterior probability density function $f(q|x)$ of p is proportional to it&#39;s prior $f(q|X)$ times a conditional probability</strong>, which is:</p>\n<script type=\"math/tex; mode=display\">f(q|x) \\sim P(X=x|p)f(q)</script><p>With this result, let&#39;s go back to the coin problem.</p>\n<p>By tossing the coin n times, it would be a Bernoulli process,  so when q is constant, the result of the n times tossing are certain,and we get an observation of k times tail, we can describe it as $P(X=x|p)=q^k(1-q)^{n-k}$.<br>So $f(q|x)$ is proportional to prior and the conditional probability above, which we say:</p>\n<script type=\"math/tex; mode=display\">f(q|x) \\sim q^k(1-q)^{n-k}f(q)</script><p>Now let&#39;s have a look at $f(q)$. Naturally, when we know nothing about the coin, we should consider the q can be any value in $[0,1]$. So we&#39;d prefer to think $f(q)$ to be uniformly distributed in this interval, which is $f(q)=1$ for q in <script type=\"math/tex\">[0,1]</script>.</p>\n<p>Now we can see in the formula $f(q|x) \\sim q^k(1-q)^{n-k}f(q)$. $q^k(1-q)^{n-k}$ times a $[0,1]$ uniform distribution would result in a <strong>Beta Distribution</strong>.</p>\n<h1 id=\"What-39-s-next\"><a href=\"#What-39-s-next\" class=\"headerlink\" title=\"What&#39;s next\"></a>What&#39;s next</h1><p>In this chapter we discussed the Bernoulli Process and how it was combined with Bayes Theorem, it may still look a little bit far from Dirichlet Process, but they are very fundamental knowledge and with a little bit variation, we will get our Dirichlet.</p>\n<p>In the next chapter, we&#39;ll discuss about Beta Distribution, talk a little bit about an important property called <strong>conjugate</strong>, which indeed made Dirichlet process so important.</p>\n"},{"title":"Discrete Random Variables And Expectation 1","date":"2018-03-22T06:57:45.000Z","_content":"\n# Random Variables and Expectation 1\n\n>Definition 2.1  \n\n*A random variable $X$ on a sample space $\\Omega$ is a real-valued (measurable) function on $\\Omega$: that is, $\\Omega \\rightarrow \\mathbb{R}$. A discrete random variable is a random variable that takes on only a finite or countably infinite number of values.*\n\nSince the random variables are functions, they are usually denoted by capital letters, while real numbers are usually denoted by lowercase letters.\n\n>Defination 2.2\n\n*Two random variables $X$ and $Y$ are independent if and only if*\n\n$$Pr((X=x)\\cap(Y=y))=Pr(X=x)\\cdot Pr(Y=y)$$  \n\n*for all values x and y. Similarly, random variables $X_1$, $X_2$,.... are mutally independent if and only if, for any subset $I\\subseteq[i,k]$ and any values $x_i$, $i\\in I$,*\n\n$$Pr\\left(\\bigcap_{i\\in I}(X_i=x_i)\\right)=\\prod_{i \\in I}Pr(X_i=x_i)$$\n\n>Definition 2.3\n\n*The expectation of a discrete random variable X, denoted by $E[X]$ , is given by*\n\n$$E[X]=\\sum_iiPr(X=i)$$","source":"_posts/DiscreteRandomVariablesAndExpectation.md","raw":"---\ntitle: Discrete Random Variables And Expectation 1\ntags: Mathematics\ncategories: Math\ndate: 2018-03-22 15:57:45\n---\n\n# Random Variables and Expectation 1\n\n>Definition 2.1  \n\n*A random variable $X$ on a sample space $\\Omega$ is a real-valued (measurable) function on $\\Omega$: that is, $\\Omega \\rightarrow \\mathbb{R}$. A discrete random variable is a random variable that takes on only a finite or countably infinite number of values.*\n\nSince the random variables are functions, they are usually denoted by capital letters, while real numbers are usually denoted by lowercase letters.\n\n>Defination 2.2\n\n*Two random variables $X$ and $Y$ are independent if and only if*\n\n$$Pr((X=x)\\cap(Y=y))=Pr(X=x)\\cdot Pr(Y=y)$$  \n\n*for all values x and y. Similarly, random variables $X_1$, $X_2$,.... are mutally independent if and only if, for any subset $I\\subseteq[i,k]$ and any values $x_i$, $i\\in I$,*\n\n$$Pr\\left(\\bigcap_{i\\in I}(X_i=x_i)\\right)=\\prod_{i \\in I}Pr(X_i=x_i)$$\n\n>Definition 2.3\n\n*The expectation of a discrete random variable X, denoted by $E[X]$ , is given by*\n\n$$E[X]=\\sum_iiPr(X=i)$$","slug":"DiscreteRandomVariablesAndExpectation","published":1,"updated":"2018-06-12T15:50:20.922Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpjdw5eg0007h711q19padal","content":"<h1 id=\"random-variables-and-expectation-1\"><a href=\"#Random-Variables-and-Expectation-1\" class=\"headerlink\" title=\"Random Variables and Expectation 1\"></a>Random Variables and Expectation 1</h1><blockquote>\n<p>Definition 2.1  </p>\n</blockquote>\n<p><em>A random variable $X$ on a sample space $\\Omega$ is a real-valued (measurable) function on $\\Omega$: that is, $\\Omega \\rightarrow \\mathbb{R}$. A discrete random variable is a random variable that takes on only a finite or countably infinite number of values.</em></p>\n<p>Since the random variables are functions, they are usually denoted by capital letters, while real numbers are usually denoted by lowercase letters.</p>\n<blockquote>\n<p>Defination 2.2</p>\n</blockquote>\n<p><em>Two random variables $X$ and $Y$ are independent if and only if</em></p>\n<script type=\"math/tex; mode=display\">Pr((X=x)\\cap(Y=y))=Pr(X=x)\\cdot Pr(Y=y)</script><p><em>for all values x and y. Similarly, random variables $X_1$, $X_2$,.... are mutally independent if and only if, for any subset $I\\subseteq[i,k]$ and any values $x_i$, $i\\in I$,</em></p>\n<script type=\"math/tex; mode=display\">Pr\\left(\\bigcap_{i\\in I}(X_i=x_i)\\right)=\\prod_{i \\in I}Pr(X_i=x_i)</script><blockquote>\n<p>Definition 2.3</p>\n</blockquote>\n<p><em>The expectation of a discrete random variable X, denoted by $E[X]$ , is given by</em></p>\n<script type=\"math/tex; mode=display\">E[X]=\\sum_iiPr(X=i)</script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Random-Variables-and-Expectation-1\"><a href=\"#Random-Variables-and-Expectation-1\" class=\"headerlink\" title=\"Random Variables and Expectation 1\"></a>Random Variables and Expectation 1</h1><blockquote>\n<p>Definition 2.1  </p>\n</blockquote>\n<p><em>A random variable $X$ on a sample space $\\Omega$ is a real-valued (measurable) function on $\\Omega$: that is, $\\Omega \\rightarrow \\mathbb{R}$. A discrete random variable is a random variable that takes on only a finite or countably infinite number of values.</em></p>\n<p>Since the random variables are functions, they are usually denoted by capital letters, while real numbers are usually denoted by lowercase letters.</p>\n<blockquote>\n<p>Defination 2.2</p>\n</blockquote>\n<p><em>Two random variables $X$ and $Y$ are independent if and only if</em></p>\n<script type=\"math/tex; mode=display\">Pr((X=x)\\cap(Y=y))=Pr(X=x)\\cdot Pr(Y=y)</script><p><em>for all values x and y. Similarly, random variables $X_1$, $X_2$,.... are mutally independent if and only if, for any subset $I\\subseteq[i,k]$ and any values $x_i$, $i\\in I$,</em></p>\n<script type=\"math/tex; mode=display\">Pr\\left(\\bigcap_{i\\in I}(X_i=x_i)\\right)=\\prod_{i \\in I}Pr(X_i=x_i)</script><blockquote>\n<p>Definition 2.3</p>\n</blockquote>\n<p><em>The expectation of a discrete random variable X, denoted by $E[X]$ , is given by</em></p>\n<script type=\"math/tex; mode=display\">E[X]=\\sum_iiPr(X=i)</script>"},{"title":"First Blog","date":"2018-03-09T10:46:51.000Z","_content":"\n\n## Why do I start to write blogs?\n\nWell, This blog is more like a personal notebook that helps myself to get a review to those things I liked and tried. Explaining something to others help me exam if I do really understand it or not, and as I have no cats that I can explain my work to  so far (But I'll have a cat one day), I decide to start to write this blog and I'd be happy if you wanna discuss about anything with me.\n\n## What will this blog mainly be about?\n\nMost time this blog would be for technical issues, scientific problems (computer science and math mostly) and software engineering problems, but there's still a possibility that I get crazy and write some stupid funny stuffs.\n\nOh, if I really get a cat, this blog will have a new chapter called CAT with cat photos.","source":"_posts/FirstBlog.md","raw":"---\ntitle: First Blog\ndate: 2018-03-09 19:46:51\ntags:\n---\n\n\n## Why do I start to write blogs?\n\nWell, This blog is more like a personal notebook that helps myself to get a review to those things I liked and tried. Explaining something to others help me exam if I do really understand it or not, and as I have no cats that I can explain my work to  so far (But I'll have a cat one day), I decide to start to write this blog and I'd be happy if you wanna discuss about anything with me.\n\n## What will this blog mainly be about?\n\nMost time this blog would be for technical issues, scientific problems (computer science and math mostly) and software engineering problems, but there's still a possibility that I get crazy and write some stupid funny stuffs.\n\nOh, if I really get a cat, this blog will have a new chapter called CAT with cat photos.","slug":"FirstBlog","published":1,"updated":"2018-04-27T07:32:41.305Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpjdw5eh0008h711h036uw6a","content":"<h2 id=\"why-do-i-start-to-write-blogs\"><a href=\"#Why-do-I-start-to-write-blogs\" class=\"headerlink\" title=\"Why do I start to write blogs?\"></a>Why do I start to write blogs?</h2><p>Well, This blog is more like a personal notebook that helps myself to get a review to those things I liked and tried. Explaining something to others help me exam if I do really understand it or not, and as I have no cats that I can explain my work to  so far (But I&#39;ll have a cat one day), I decide to start to write this blog and I&#39;d be happy if you wanna discuss about anything with me.</p>\n<h2 id=\"what-will-this-blog-mainly-be-about\"><a href=\"#What-will-this-blog-mainly-be-about\" class=\"headerlink\" title=\"What will this blog mainly be about?\"></a>What will this blog mainly be about?</h2><p>Most time this blog would be for technical issues, scientific problems (computer science and math mostly) and software engineering problems, but there&#39;s still a possibility that I get crazy and write some stupid funny stuffs.</p>\n<p>Oh, if I really get a cat, this blog will have a new chapter called CAT with cat photos.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Why-do-I-start-to-write-blogs\"><a href=\"#Why-do-I-start-to-write-blogs\" class=\"headerlink\" title=\"Why do I start to write blogs?\"></a>Why do I start to write blogs?</h2><p>Well, This blog is more like a personal notebook that helps myself to get a review to those things I liked and tried. Explaining something to others help me exam if I do really understand it or not, and as I have no cats that I can explain my work to  so far (But I&#39;ll have a cat one day), I decide to start to write this blog and I&#39;d be happy if you wanna discuss about anything with me.</p>\n<h2 id=\"What-will-this-blog-mainly-be-about\"><a href=\"#What-will-this-blog-mainly-be-about\" class=\"headerlink\" title=\"What will this blog mainly be about?\"></a>What will this blog mainly be about?</h2><p>Most time this blog would be for technical issues, scientific problems (computer science and math mostly) and software engineering problems, but there&#39;s still a possibility that I get crazy and write some stupid funny stuffs.</p>\n<p>Oh, if I really get a cat, this blog will have a new chapter called CAT with cat photos.</p>\n"},{"title":"Start a Smart Project with Github","date":"2018-05-11T04:41:39.000Z","_content":"\n\n**GitHub** is now widely used platform that helps people develop and distribute their project. Knowing how to use some interesting function of GitHub can make your developing process fluent and stable.\n\n- Issue and pull-request\n- Automatic test\n- Protected Master branch\n\n----------\n\n# \bIssue and Pull Request\n\nWhen building a project, the developing history should be open and trackable. In order to do so, it is recommended to use some method to track every change and improvement. Use **Issue** to track every improvements that will do developers good favour.\n\nEvery issue have an index, which is marked by #, looks like `#3`.\n\n**Pull request** is used for cooperation, GitHub provides many interesting functions with pull request, one of them is *Close an issue with pull request*. In order to do so, just make the description of your pull request look like this:\n\n```\nMessage: Pull request from forked \"xxx\".\n\nDescription: Resolve #3.\n```\n\n*\"Resolve\"* is a token that will close an issue, so will *\"Fix\"* and *\"close\"* do. Check [official doc](https://help.github.com/articles/closing-issues-using-keywords/) for further information.\n\n# Automatic test\nEvery time you commit something to your project, you have to make sure that the whole project doesn't break down because of your commit contains bugs or something. Luckily, Travis-CI can do it and its also supported by GitHub, wichi means you can view if your test passed or not before admit a pull request.\n![](/images/github_project/1.png)\n\nTo distribute the automatic test is very simple. All you need to do is add a ```.travis.yml``` file to the root directory of your project.\n\nSee [official doc](https://docs.travis-ci.com/) for more help.\n\n# Protected Master branch\nMaster branch is very important to your project, which should not be manipulated casually, it is recommended to add several protection checks when merge any commit to your master branch.\n\nIt is recommended to do as follows:\n![](/images/github_project/2.png)\n\nThen look! Your master branch is under protection!\n![](/images/github_project/3.png)\n","source":"_posts/Github-Project.md","raw":"---\ntitle: Start a Smart Project with Github\ntags:\n  - Github\n  - Engineer\ncategories:\n  - Engineer\ndate: 2018-05-11 13:41:39\n---\n\n\n**GitHub** is now widely used platform that helps people develop and distribute their project. Knowing how to use some interesting function of GitHub can make your developing process fluent and stable.\n\n- Issue and pull-request\n- Automatic test\n- Protected Master branch\n\n----------\n\n# \bIssue and Pull Request\n\nWhen building a project, the developing history should be open and trackable. In order to do so, it is recommended to use some method to track every change and improvement. Use **Issue** to track every improvements that will do developers good favour.\n\nEvery issue have an index, which is marked by #, looks like `#3`.\n\n**Pull request** is used for cooperation, GitHub provides many interesting functions with pull request, one of them is *Close an issue with pull request*. In order to do so, just make the description of your pull request look like this:\n\n```\nMessage: Pull request from forked \"xxx\".\n\nDescription: Resolve #3.\n```\n\n*\"Resolve\"* is a token that will close an issue, so will *\"Fix\"* and *\"close\"* do. Check [official doc](https://help.github.com/articles/closing-issues-using-keywords/) for further information.\n\n# Automatic test\nEvery time you commit something to your project, you have to make sure that the whole project doesn't break down because of your commit contains bugs or something. Luckily, Travis-CI can do it and its also supported by GitHub, wichi means you can view if your test passed or not before admit a pull request.\n![](/images/github_project/1.png)\n\nTo distribute the automatic test is very simple. All you need to do is add a ```.travis.yml``` file to the root directory of your project.\n\nSee [official doc](https://docs.travis-ci.com/) for more help.\n\n# Protected Master branch\nMaster branch is very important to your project, which should not be manipulated casually, it is recommended to add several protection checks when merge any commit to your master branch.\n\nIt is recommended to do as follows:\n![](/images/github_project/2.png)\n\nThen look! Your master branch is under protection!\n![](/images/github_project/3.png)\n","slug":"Github-Project","published":1,"updated":"2018-05-14T15:18:05.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpjdw5ej000bh71158chbif1","content":"<p><strong>GitHub</strong> is now widely used platform that helps people develop and distribute their project. Knowing how to use some interesting function of GitHub can make your developing process fluent and stable.</p>\n<ul>\n<li>Issue and pull-request</li>\n<li>Automatic test</li>\n<li>Protected Master branch</li>\n</ul>\n<hr>\n<h1 id=\"issue-and-pull-request\"><a href=\"#Issue-and-Pull-Request\" class=\"headerlink\" title=\"\bIssue and Pull Request\"></a>\bIssue and Pull Request</h1><p>When building a project, the developing history should be open and trackable. In order to do so, it is recommended to use some method to track every change and improvement. Use <strong>Issue</strong> to track every improvements that will do developers good favour.</p>\n<p>Every issue have an index, which is marked by #, looks like <code>#3</code>.</p>\n<p><strong>Pull request</strong> is used for cooperation, GitHub provides many interesting functions with pull request, one of them is <em>Close an issue with pull request</em>. In order to do so, just make the description of your pull request look like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Message: Pull request from forked &quot;xxx&quot;.</span><br><span class=\"line\"></span><br><span class=\"line\">Description: Resolve #3.</span><br></pre></td></tr></table></figure>\n<p><em>&quot;Resolve&quot;</em> is a token that will close an issue, so will <em>&quot;Fix&quot;</em> and <em>&quot;close&quot;</em> do. Check <a href=\"https://help.github.com/articles/closing-issues-using-keywords/\" target=\"_blank\" rel=\"noopener\">official doc</a> for further information.</p>\n<h1 id=\"automatic-test\"><a href=\"#Automatic-test\" class=\"headerlink\" title=\"Automatic test\"></a>Automatic test</h1><p>Every time you commit something to your project, you have to make sure that the whole project doesn&#39;t break down because of your commit contains bugs or something. Luckily, Travis-CI can do it and its also supported by GitHub, wichi means you can view if your test passed or not before admit a pull request.<br><img src=\"/images/github_project/1.png\" alt=\"\"></p>\n<p>To distribute the automatic test is very simple. All you need to do is add a <code>.travis.yml</code> file to the root directory of your project.</p>\n<p>See <a href=\"https://docs.travis-ci.com/\" target=\"_blank\" rel=\"noopener\">official doc</a> for more help.</p>\n<h1 id=\"protected-master-branch\"><a href=\"#Protected-Master-branch\" class=\"headerlink\" title=\"Protected Master branch\"></a>Protected Master branch</h1><p>Master branch is very important to your project, which should not be manipulated casually, it is recommended to add several protection checks when merge any commit to your master branch.</p>\n<p>It is recommended to do as follows:<br><img src=\"/images/github_project/2.png\" alt=\"\"></p>\n<p>Then look! Your master branch is under protection!<br><img src=\"/images/github_project/3.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>GitHub</strong> is now widely used platform that helps people develop and distribute their project. Knowing how to use some interesting function of GitHub can make your developing process fluent and stable.</p>\n<ul>\n<li>Issue and pull-request</li>\n<li>Automatic test</li>\n<li>Protected Master branch</li>\n</ul>\n<hr>\n<h1 id=\"Issue-and-Pull-Request\"><a href=\"#Issue-and-Pull-Request\" class=\"headerlink\" title=\"\bIssue and Pull Request\"></a>\bIssue and Pull Request</h1><p>When building a project, the developing history should be open and trackable. In order to do so, it is recommended to use some method to track every change and improvement. Use <strong>Issue</strong> to track every improvements that will do developers good favour.</p>\n<p>Every issue have an index, which is marked by #, looks like <code>#3</code>.</p>\n<p><strong>Pull request</strong> is used for cooperation, GitHub provides many interesting functions with pull request, one of them is <em>Close an issue with pull request</em>. In order to do so, just make the description of your pull request look like this:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Message: Pull request from forked &quot;xxx&quot;.</span><br><span class=\"line\"></span><br><span class=\"line\">Description: Resolve #3.</span><br></pre></td></tr></table></figure>\n<p><em>&quot;Resolve&quot;</em> is a token that will close an issue, so will <em>&quot;Fix&quot;</em> and <em>&quot;close&quot;</em> do. Check <a href=\"https://help.github.com/articles/closing-issues-using-keywords/\" target=\"_blank\" rel=\"noopener\">official doc</a> for further information.</p>\n<h1 id=\"Automatic-test\"><a href=\"#Automatic-test\" class=\"headerlink\" title=\"Automatic test\"></a>Automatic test</h1><p>Every time you commit something to your project, you have to make sure that the whole project doesn&#39;t break down because of your commit contains bugs or something. Luckily, Travis-CI can do it and its also supported by GitHub, wichi means you can view if your test passed or not before admit a pull request.<br><img src=\"/images/github_project/1.png\" alt=\"\"></p>\n<p>To distribute the automatic test is very simple. All you need to do is add a <code>.travis.yml</code> file to the root directory of your project.</p>\n<p>See <a href=\"https://docs.travis-ci.com/\" target=\"_blank\" rel=\"noopener\">official doc</a> for more help.</p>\n<h1 id=\"Protected-Master-branch\"><a href=\"#Protected-Master-branch\" class=\"headerlink\" title=\"Protected Master branch\"></a>Protected Master branch</h1><p>Master branch is very important to your project, which should not be manipulated casually, it is recommended to add several protection checks when merge any commit to your master branch.</p>\n<p>It is recommended to do as follows:<br><img src=\"/images/github_project/2.png\" alt=\"\"></p>\n<p>Then look! Your master branch is under protection!<br><img src=\"/images/github_project/3.png\" alt=\"\"></p>\n"},{"title":"Leetcode 17.Letter Combinations of a Phone Number","date":"2018-03-30T14:17:13.000Z","_content":"\nGiven a digit string, return all possible letter combinations that the number could represent.\n\nA mapping of digit to letters (just like on the telephone buttons) is given below.\n![](/images/leetcode17_1.png)\n\n    Input:Digit string \"23\"\n    Output: [\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"].\n\n**Note:**\nAlthough the above answer is in lexicographical order, your answer could be in any order you want.\n\n*java* \n```java\npublic List<String> letterCombinations(String digits) {\n    LinkedList<String> ans = new LinkedList<>();\n    if (0 == digits.length()) {\n        return ans;\n    }\n    String[] mapping = new String[]{\"0\", \"1\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\"};\n    ans.add(\"\");\n    for (int i = 0; i < digits.length(); i++) {\n        int x = Character.getNumericValue(digits.charAt(i));\n        while (ans.peek().length() == i) {\n            String temp = ans.remove();\n            for (Character c : mapping[x].toCharArray()) {\n                ans.add(temp + c);\n            }\n        }\n    }\n    return ans;\n}\n```\n\nThis alogirthm uses a queque to make sure every new character was added to the previous string, shown as below.\n\n![](/images/leetcode17_2.png)","source":"_posts/Letter-Combinations-of-a-Phone-Number.md","raw":"---\ntitle: Leetcode 17.Letter Combinations of a Phone Number\ndate: 2018-03-30 23:17:13\ncategories:\n- Leetcode\ntags:\n- Leetcode\n- Algorithm\n- Coding\n\n---\n\nGiven a digit string, return all possible letter combinations that the number could represent.\n\nA mapping of digit to letters (just like on the telephone buttons) is given below.\n![](/images/leetcode17_1.png)\n\n    Input:Digit string \"23\"\n    Output: [\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"].\n\n**Note:**\nAlthough the above answer is in lexicographical order, your answer could be in any order you want.\n\n*java* \n```java\npublic List<String> letterCombinations(String digits) {\n    LinkedList<String> ans = new LinkedList<>();\n    if (0 == digits.length()) {\n        return ans;\n    }\n    String[] mapping = new String[]{\"0\", \"1\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\"};\n    ans.add(\"\");\n    for (int i = 0; i < digits.length(); i++) {\n        int x = Character.getNumericValue(digits.charAt(i));\n        while (ans.peek().length() == i) {\n            String temp = ans.remove();\n            for (Character c : mapping[x].toCharArray()) {\n                ans.add(temp + c);\n            }\n        }\n    }\n    return ans;\n}\n```\n\nThis alogirthm uses a queque to make sure every new character was added to the previous string, shown as below.\n\n![](/images/leetcode17_2.png)","slug":"Letter-Combinations-of-a-Phone-Number","published":1,"updated":"2018-08-30T12:13:34.193Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpjdw5em000dh711ryx55mxx","content":"<p>Given a digit string, return all possible letter combinations that the number could represent.</p>\n<p>A mapping of digit to letters (just like on the telephone buttons) is given below.<br><img src=\"/images/leetcode17_1.png\" alt=\"\"></p>\n<pre><code>Input:Digit string &quot;23&quot;\nOutput: [&quot;ad&quot;, &quot;ae&quot;, &quot;af&quot;, &quot;bd&quot;, &quot;be&quot;, &quot;bf&quot;, &quot;cd&quot;, &quot;ce&quot;, &quot;cf&quot;].\n</code></pre><p><strong>Note:</strong><br>Although the above answer is in lexicographical order, your answer could be in any order you want.</p>\n<p><em>java</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">letterCombinations</span><span class=\"params\">(String digits)</span> </span>&#123;</span><br><span class=\"line\">    LinkedList&lt;String&gt; ans = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">0</span> == digits.length()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    String[] mapping = <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"0\"</span>, <span class=\"string\">\"1\"</span>, <span class=\"string\">\"abc\"</span>, <span class=\"string\">\"def\"</span>, <span class=\"string\">\"ghi\"</span>, <span class=\"string\">\"jkl\"</span>, <span class=\"string\">\"mno\"</span>, <span class=\"string\">\"pqrs\"</span>, <span class=\"string\">\"tuv\"</span>, <span class=\"string\">\"wxyz\"</span>&#125;;</span><br><span class=\"line\">    ans.add(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; digits.length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = Character.getNumericValue(digits.charAt(i));</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (ans.peek().length() == i) &#123;</span><br><span class=\"line\">            String temp = ans.remove();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Character c : mapping[x].toCharArray()) &#123;</span><br><span class=\"line\">                ans.add(temp + c);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>This alogirthm uses a queque to make sure every new character was added to the previous string, shown as below.</p>\n<p><img src=\"/images/leetcode17_2.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Given a digit string, return all possible letter combinations that the number could represent.</p>\n<p>A mapping of digit to letters (just like on the telephone buttons) is given below.<br><img src=\"/images/leetcode17_1.png\" alt=\"\"></p>\n<pre><code>Input:Digit string &quot;23&quot;\nOutput: [&quot;ad&quot;, &quot;ae&quot;, &quot;af&quot;, &quot;bd&quot;, &quot;be&quot;, &quot;bf&quot;, &quot;cd&quot;, &quot;ce&quot;, &quot;cf&quot;].\n</code></pre><p><strong>Note:</strong><br>Although the above answer is in lexicographical order, your answer could be in any order you want.</p>\n<p><em>java</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title\">letterCombinations</span><span class=\"params\">(String digits)</span> </span>&#123;</span><br><span class=\"line\">    LinkedList&lt;String&gt; ans = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"number\">0</span> == digits.length()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    String[] mapping = <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"0\"</span>, <span class=\"string\">\"1\"</span>, <span class=\"string\">\"abc\"</span>, <span class=\"string\">\"def\"</span>, <span class=\"string\">\"ghi\"</span>, <span class=\"string\">\"jkl\"</span>, <span class=\"string\">\"mno\"</span>, <span class=\"string\">\"pqrs\"</span>, <span class=\"string\">\"tuv\"</span>, <span class=\"string\">\"wxyz\"</span>&#125;;</span><br><span class=\"line\">    ans.add(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; digits.length(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = Character.getNumericValue(digits.charAt(i));</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (ans.peek().length() == i) &#123;</span><br><span class=\"line\">            String temp = ans.remove();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Character c : mapping[x].toCharArray()) &#123;</span><br><span class=\"line\">                ans.add(temp + c);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>This alogirthm uses a queque to make sure every new character was added to the previous string, shown as below.</p>\n<p><img src=\"/images/leetcode17_2.png\" alt=\"\"></p>\n"},{"title":"Python, Deeper Understanding","date":"2018-10-28T12:32:18.000Z","_content":"\n\n> Here's the plan: when someone uses a feature you don't understand, simply shoot them. This is easier than learning something new, and before too long the only living coders will be writing in an easily understood, tiny subset of Python 0.9.6 (wink).\n<p align=\"right\">Tim Peters, Legendary Core developer and author of The Zen of Python</p>\n\n-----------\nSadly, I've been one of those \"shooters\" for a long time. I've been writing Python code for around four years on many different tasks. From back-end server that provide service to many clients, to playing Kaggle competitions, Python has always been one of the most frequently used languages and I do really like it in most cases (however, there're also some cases that I really messed up with it). Looking back in those code I've written, I start to think, are they elegant enough? The answer is definitely NO. The python provided multiple interesting and power features that is different from C++ and JAVA, but I never used them. \n\nSince I would work with Python for a long time in the coming future, I'd better learn more about Python and try to write more pythonic code. Besides, the Zen of Python is influencing the design of many other languages, understanding more about the successful language would benefit those who like and enjoy programming.\n\n This series would be a memo and conclusion of Python, basically Python 3.6, mainly talking about more advanced Python features, so before reading it, you are thought to have experience of programming Python, be able to write, read and understand basic Python code. This series is for those who want to go further and write more elegant (pythonic?) code. Discussion and comments are welcomed.","source":"_posts/python0.md","raw":"---\ntitle: 'Python, Deeper Understanding'\ntags:\n  - Python\n  - Engineer\n  - Programming\ncategories:\n  - Computer Science\ndate: 2018-10-28 21:32:18\n---\n\n\n> Here's the plan: when someone uses a feature you don't understand, simply shoot them. This is easier than learning something new, and before too long the only living coders will be writing in an easily understood, tiny subset of Python 0.9.6 (wink).\n<p align=\"right\">Tim Peters, Legendary Core developer and author of The Zen of Python</p>\n\n-----------\nSadly, I've been one of those \"shooters\" for a long time. I've been writing Python code for around four years on many different tasks. From back-end server that provide service to many clients, to playing Kaggle competitions, Python has always been one of the most frequently used languages and I do really like it in most cases (however, there're also some cases that I really messed up with it). Looking back in those code I've written, I start to think, are they elegant enough? The answer is definitely NO. The python provided multiple interesting and power features that is different from C++ and JAVA, but I never used them. \n\nSince I would work with Python for a long time in the coming future, I'd better learn more about Python and try to write more pythonic code. Besides, the Zen of Python is influencing the design of many other languages, understanding more about the successful language would benefit those who like and enjoy programming.\n\n This series would be a memo and conclusion of Python, basically Python 3.6, mainly talking about more advanced Python features, so before reading it, you are thought to have experience of programming Python, be able to write, read and understand basic Python code. This series is for those who want to go further and write more elegant (pythonic?) code. Discussion and comments are welcomed.","slug":"python0","published":1,"updated":"2018-10-28T12:34:14.313Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpjdw5en000fh711x6e0lyyj","content":"<blockquote>\n<p>Here&#39;s the plan: when someone uses a feature you don&#39;t understand, simply shoot them. This is easier than learning something new, and before too long the only living coders will be writing in an easily understood, tiny subset of Python 0.9.6 (wink).</p>\n<p align=\"right\">Tim Peters, Legendary Core developer and author of The Zen of Python</p>\n\n</blockquote>\n<hr>\n<p>Sadly, I&#39;ve been one of those &quot;shooters&quot; for a long time. I&#39;ve been writing Python code for around four years on many different tasks. From back-end server that provide service to many clients, to playing Kaggle competitions, Python has always been one of the most frequently used languages and I do really like it in most cases (however, there&#39;re also some cases that I really messed up with it). Looking back in those code I&#39;ve written, I start to think, are they elegant enough? The answer is definitely NO. The python provided multiple interesting and power features that is different from C++ and JAVA, but I never used them. </p>\n<p>Since I would work with Python for a long time in the coming future, I&#39;d better learn more about Python and try to write more pythonic code. Besides, the Zen of Python is influencing the design of many other languages, understanding more about the successful language would benefit those who like and enjoy programming.</p>\n<p> This series would be a memo and conclusion of Python, basically Python 3.6, mainly talking about more advanced Python features, so before reading it, you are thought to have experience of programming Python, be able to write, read and understand basic Python code. This series is for those who want to go further and write more elegant (pythonic?) code. Discussion and comments are welcomed.</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Here&#39;s the plan: when someone uses a feature you don&#39;t understand, simply shoot them. This is easier than learning something new, and before too long the only living coders will be writing in an easily understood, tiny subset of Python 0.9.6 (wink).</p>\n<p align=\"right\">Tim Peters, Legendary Core developer and author of The Zen of Python</p>\n\n</blockquote>\n<hr>\n<p>Sadly, I&#39;ve been one of those &quot;shooters&quot; for a long time. I&#39;ve been writing Python code for around four years on many different tasks. From back-end server that provide service to many clients, to playing Kaggle competitions, Python has always been one of the most frequently used languages and I do really like it in most cases (however, there&#39;re also some cases that I really messed up with it). Looking back in those code I&#39;ve written, I start to think, are they elegant enough? The answer is definitely NO. The python provided multiple interesting and power features that is different from C++ and JAVA, but I never used them. </p>\n<p>Since I would work with Python for a long time in the coming future, I&#39;d better learn more about Python and try to write more pythonic code. Besides, the Zen of Python is influencing the design of many other languages, understanding more about the successful language would benefit those who like and enjoy programming.</p>\n<p> This series would be a memo and conclusion of Python, basically Python 3.6, mainly talking about more advanced Python features, so before reading it, you are thought to have experience of programming Python, be able to write, read and understand basic Python code. This series is for those who want to go further and write more elegant (pythonic?) code. Discussion and comments are welcomed.</p>\n"},{"title":"Data Model in Python","date":"2018-10-28T14:36:18.000Z","_content":"\n\n> One of the best qualities of Python is its consistency.\n<p align=\"right\">Luciano Ramalho, author of Fluent Python: Clear, Concise, and Effective Programming</p>\n\nBy the first time I read this sentence, all I felt was wired. As we all know, Python is a dynamically-typed language, you can never succeed in guessing the class or type of a variable\b. So at least, in terms of type, Python is far from consistent. However, soon I understand the meaning of consistency in Python: Nothing is special. Here, we're going to see several examples and understand what *\"consistency\"* really means in Python.\n\n> Note: In Python, we're going to meet a lot of methods that looks like **\\_\\_getitem\\_\\_**, and we'll call them *\"dunder_getitem\"* (dunder means double-under). And also notice that, double under like **\\_\\_x** has other meanings in Python, and please don't mess up with them.\n\nIt's very important to implement those methods that can be called by the framework itself, we're going to show you how to implement two special methods called **\\_\\_getitem\\_\\_** and **\\_\\_len\\_\\_**.\n\n## 1.1 Pythonic Cards\n\nCode 1-1: Cards with order.\n```python\nimport collections\n\ncard = collections.namedtuple('Card', ['rank', 'suit'])\n\nclass FrenchDeck:\n    ranks = [str(n) for n in range(2, 11)] + list('JQKA')\n    suits = 'spades diamonds clubs hearts'.split()\n    \n    def __init__(self):\n        self._cards = [Card(rank, suit) for suit in self.suits\n                                        for rank in self.ranks]\n    \n    def __len__(self):\n        return len(self._cards)\n    \n    def __getitem__(self, position):\n        return self._cards[position]\n\n```\n\nNow, let's look at the **FrenchDeck** class. It's short and powerful. First of all, like any Python standard collection class, we can use **len()** function to check how many cards in it:\n```python\n>>> deck = FrenchDeck()\n>>> len(deck)\n52\n```\nWe can also pick any specific card in the cards using **[ ]** like the following code:\n```python\n>>> deck[0]\nCard(rank='2', suit='spades')\n>>> deck[-1]\nCard(rank='A', suit='hearts')\n```\n\nThe more interesting thing is that, we don't need to write a new function to randomly pick a card, Python already had a function called **random.choice** to do the job, and we can just use it on the instance of our cards.\n\n```python\n>>> from random import choice\n>>> choice(deck)\nCard(rank='4', suit='spades')\n```\n\nSee! We already benefit from implementing special methods to use Python data model:\n- The users of your class doesn't need to remember many different names of a standard manipulation (**sizeof()** or **length()** or something else).\n- Just use Python standard library, no need for re-inventing the wheels.\n\nEven more, since **\\_\\_getitem\\_\\_** hands **[ ]** manipulation to **self._cards** list, so our **deck** class automatically supports slicing. See below:\n\n```python\n>>> deck[: 3]\n[Card(rank='2', suit='spades'),\n Card(rank='3', suit='spades'),\n Card(rank='4', suit='spades')]\n>>> deck[12:: 13]\n[Card(rank='A', suit='spades'),\n Card(rank='A', suit='diamonds'),\n Card(rank='A', suit='clubs'),\n Card(rank='A', suit='hearts')]\n```\nThe second function means that, pick all cards that has index 12, and pick one in every 13 cards.\n\nAnd even more! Just by implementing **\\_\\_getitem\\_\\_** method, the cards become iterable:\n```python\n>>> for card in deck: # doctest: +ELLIPSIS\n...     print(card)\nCard(rank='2', suit='spades')\nCard(rank='3', suit='spades')\nCard(rank='4', suit='spades')\nCard(rank='5', suit='spades')\n...v\n```\n\nJust by implementing **\\_\\_getitem\\_\\_** and **\\_\\len\\_\\_** methods, **FrenchDeck** class is just like any sequential data model in Python, showing core features of Python (like iterating and slicing). It can also be used for standard libraries like **random.choice**, **reversed** and **sorted**.\n\nHere, we see how consistency exists in Python, and definitely we can write more elegant and pythonic code by implementing these special methods.\n\nHowever, our cards still cannot be shuffled so far. We'll not talk about it now, although it's easy enough to be implemented by a single line of code in **\\_\\_setitem\\_\\_**, it influences more important things and we'll talk about them together.","source":"_posts/python1.md","raw":"---\ntitle: Data Model in Python\ntags:\n  - Python\n  - Engineer\n  - Programming\ncategories:\n  - Computer Science\ndate: 2018-10-28 23:36:18\n---\n\n\n> One of the best qualities of Python is its consistency.\n<p align=\"right\">Luciano Ramalho, author of Fluent Python: Clear, Concise, and Effective Programming</p>\n\nBy the first time I read this sentence, all I felt was wired. As we all know, Python is a dynamically-typed language, you can never succeed in guessing the class or type of a variable\b. So at least, in terms of type, Python is far from consistent. However, soon I understand the meaning of consistency in Python: Nothing is special. Here, we're going to see several examples and understand what *\"consistency\"* really means in Python.\n\n> Note: In Python, we're going to meet a lot of methods that looks like **\\_\\_getitem\\_\\_**, and we'll call them *\"dunder_getitem\"* (dunder means double-under). And also notice that, double under like **\\_\\_x** has other meanings in Python, and please don't mess up with them.\n\nIt's very important to implement those methods that can be called by the framework itself, we're going to show you how to implement two special methods called **\\_\\_getitem\\_\\_** and **\\_\\_len\\_\\_**.\n\n## 1.1 Pythonic Cards\n\nCode 1-1: Cards with order.\n```python\nimport collections\n\ncard = collections.namedtuple('Card', ['rank', 'suit'])\n\nclass FrenchDeck:\n    ranks = [str(n) for n in range(2, 11)] + list('JQKA')\n    suits = 'spades diamonds clubs hearts'.split()\n    \n    def __init__(self):\n        self._cards = [Card(rank, suit) for suit in self.suits\n                                        for rank in self.ranks]\n    \n    def __len__(self):\n        return len(self._cards)\n    \n    def __getitem__(self, position):\n        return self._cards[position]\n\n```\n\nNow, let's look at the **FrenchDeck** class. It's short and powerful. First of all, like any Python standard collection class, we can use **len()** function to check how many cards in it:\n```python\n>>> deck = FrenchDeck()\n>>> len(deck)\n52\n```\nWe can also pick any specific card in the cards using **[ ]** like the following code:\n```python\n>>> deck[0]\nCard(rank='2', suit='spades')\n>>> deck[-1]\nCard(rank='A', suit='hearts')\n```\n\nThe more interesting thing is that, we don't need to write a new function to randomly pick a card, Python already had a function called **random.choice** to do the job, and we can just use it on the instance of our cards.\n\n```python\n>>> from random import choice\n>>> choice(deck)\nCard(rank='4', suit='spades')\n```\n\nSee! We already benefit from implementing special methods to use Python data model:\n- The users of your class doesn't need to remember many different names of a standard manipulation (**sizeof()** or **length()** or something else).\n- Just use Python standard library, no need for re-inventing the wheels.\n\nEven more, since **\\_\\_getitem\\_\\_** hands **[ ]** manipulation to **self._cards** list, so our **deck** class automatically supports slicing. See below:\n\n```python\n>>> deck[: 3]\n[Card(rank='2', suit='spades'),\n Card(rank='3', suit='spades'),\n Card(rank='4', suit='spades')]\n>>> deck[12:: 13]\n[Card(rank='A', suit='spades'),\n Card(rank='A', suit='diamonds'),\n Card(rank='A', suit='clubs'),\n Card(rank='A', suit='hearts')]\n```\nThe second function means that, pick all cards that has index 12, and pick one in every 13 cards.\n\nAnd even more! Just by implementing **\\_\\_getitem\\_\\_** method, the cards become iterable:\n```python\n>>> for card in deck: # doctest: +ELLIPSIS\n...     print(card)\nCard(rank='2', suit='spades')\nCard(rank='3', suit='spades')\nCard(rank='4', suit='spades')\nCard(rank='5', suit='spades')\n...v\n```\n\nJust by implementing **\\_\\_getitem\\_\\_** and **\\_\\len\\_\\_** methods, **FrenchDeck** class is just like any sequential data model in Python, showing core features of Python (like iterating and slicing). It can also be used for standard libraries like **random.choice**, **reversed** and **sorted**.\n\nHere, we see how consistency exists in Python, and definitely we can write more elegant and pythonic code by implementing these special methods.\n\nHowever, our cards still cannot be shuffled so far. We'll not talk about it now, although it's easy enough to be implemented by a single line of code in **\\_\\_setitem\\_\\_**, it influences more important things and we'll talk about them together.","slug":"python1","published":1,"updated":"2018-12-06T06:56:42.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpjdw5er000ih711hli70rte","content":"<blockquote>\n<p>One of the best qualities of Python is its consistency.</p>\n<p align=\"right\">Luciano Ramalho, author of Fluent Python: Clear, Concise, and Effective Programming</p>\n\n</blockquote>\n<p>By the first time I read this sentence, all I felt was wired. As we all know, Python is a dynamically-typed language, you can never succeed in guessing the class or type of a variable\b. So at least, in terms of type, Python is far from consistent. However, soon I understand the meaning of consistency in Python: Nothing is special. Here, we&#39;re going to see several examples and understand what <em>&quot;consistency&quot;</em> really means in Python.</p>\n<blockquote>\n<p>Note: In Python, we&#39;re going to meet a lot of methods that looks like <strong>__getitem__</strong>, and we&#39;ll call them <em>&quot;dunder_getitem&quot;</em> (dunder means double-under). And also notice that, double under like <strong>__x</strong> has other meanings in Python, and please don&#39;t mess up with them.</p>\n</blockquote>\n<p>It&#39;s very important to implement those methods that can be called by the framework itself, we&#39;re going to show you how to implement two special methods called <strong>__getitem__</strong> and <strong>__len__</strong>.</p>\n<h2 id=\"11-pythonic-cards\"><a href=\"#1-1-Pythonic-Cards\" class=\"headerlink\" title=\"1.1 Pythonic Cards\"></a>1.1 Pythonic Cards</h2><p>Code 1-1: Cards with order.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> collections</span><br><span class=\"line\"></span><br><span class=\"line\">card = collections.namedtuple(<span class=\"string\">'Card'</span>, [<span class=\"string\">'rank'</span>, <span class=\"string\">'suit'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FrenchDeck</span>:</span></span><br><span class=\"line\">    ranks = [str(n) <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>, <span class=\"number\">11</span>)] + list(<span class=\"string\">'JQKA'</span>)</span><br><span class=\"line\">    suits = <span class=\"string\">'spades diamonds clubs hearts'</span>.split()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self._cards = [Card(rank, suit) <span class=\"keyword\">for</span> suit <span class=\"keyword\">in</span> self.suits</span><br><span class=\"line\">                                        <span class=\"keyword\">for</span> rank <span class=\"keyword\">in</span> self.ranks]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__len__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> len(self._cards)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getitem__</span><span class=\"params\">(self, position)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._cards[position]</span><br></pre></td></tr></table></figure></p>\n<p>Now, let&#39;s look at the <strong>FrenchDeck</strong> class. It&#39;s short and powerful. First of all, like any Python standard collection class, we can use <strong>len()</strong> function to check how many cards in it:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>deck = FrenchDeck()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>len(deck)</span><br><span class=\"line\"><span class=\"number\">52</span></span><br></pre></td></tr></table></figure></p>\n<p>We can also pick any specific card in the cards using <strong>[ ]</strong> like the following code:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>deck[<span class=\"number\">0</span>]</span><br><span class=\"line\">Card(rank=<span class=\"string\">'2'</span>, suit=<span class=\"string\">'spades'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>deck[<span class=\"number\">-1</span>]</span><br><span class=\"line\">Card(rank=<span class=\"string\">'A'</span>, suit=<span class=\"string\">'hearts'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>The more interesting thing is that, we don&#39;t need to write a new function to randomly pick a card, Python already had a function called <strong>random.choice</strong> to do the job, and we can just use it on the instance of our cards.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> choice</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>choice(deck)</span><br><span class=\"line\">Card(rank=<span class=\"string\">'4'</span>, suit=<span class=\"string\">'spades'</span>)</span><br></pre></td></tr></table></figure>\n<p>See! We already benefit from implementing special methods to use Python data model:</p>\n<ul>\n<li>The users of your class doesn&#39;t need to remember many different names of a standard manipulation (<strong>sizeof()</strong> or <strong>length()</strong> or something else).</li>\n<li>Just use Python standard library, no need for re-inventing the wheels.</li>\n</ul>\n<p>Even more, since <strong>__getitem__</strong> hands <strong>[ ]</strong> manipulation to <strong>self._cards</strong> list, so our <strong>deck</strong> class automatically supports slicing. See below:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>deck[: <span class=\"number\">3</span>]</span><br><span class=\"line\">[Card(rank=<span class=\"string\">'2'</span>, suit=<span class=\"string\">'spades'</span>),</span><br><span class=\"line\"> Card(rank=<span class=\"string\">'3'</span>, suit=<span class=\"string\">'spades'</span>),</span><br><span class=\"line\"> Card(rank=<span class=\"string\">'4'</span>, suit=<span class=\"string\">'spades'</span>)]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>deck[<span class=\"number\">12</span>:: <span class=\"number\">13</span>]</span><br><span class=\"line\">[Card(rank=<span class=\"string\">'A'</span>, suit=<span class=\"string\">'spades'</span>),</span><br><span class=\"line\"> Card(rank=<span class=\"string\">'A'</span>, suit=<span class=\"string\">'diamonds'</span>),</span><br><span class=\"line\"> Card(rank=<span class=\"string\">'A'</span>, suit=<span class=\"string\">'clubs'</span>),</span><br><span class=\"line\"> Card(rank=<span class=\"string\">'A'</span>, suit=<span class=\"string\">'hearts'</span>)]</span><br></pre></td></tr></table></figure>\n<p>The second function means that, pick all cards that has index 12, and pick one in every 13 cards.</p>\n<p>And even more! Just by implementing <strong>__getitem__</strong> method, the cards become iterable:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> card <span class=\"keyword\">in</span> deck: <span class=\"comment\"># doctest: +ELLIPSIS</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    print(card)</span><br><span class=\"line\">Card(rank=<span class=\"string\">'2'</span>, suit=<span class=\"string\">'spades'</span>)</span><br><span class=\"line\">Card(rank=<span class=\"string\">'3'</span>, suit=<span class=\"string\">'spades'</span>)</span><br><span class=\"line\">Card(rank=<span class=\"string\">'4'</span>, suit=<span class=\"string\">'spades'</span>)</span><br><span class=\"line\">Card(rank=<span class=\"string\">'5'</span>, suit=<span class=\"string\">'spades'</span>)</span><br><span class=\"line\">...v</span><br></pre></td></tr></table></figure></p>\n<p>Just by implementing <strong>__getitem__</strong> and <strong>_\\len__</strong> methods, <strong>FrenchDeck</strong> class is just like any sequential data model in Python, showing core features of Python (like iterating and slicing). It can also be used for standard libraries like <strong>random.choice</strong>, <strong>reversed</strong> and <strong>sorted</strong>.</p>\n<p>Here, we see how consistency exists in Python, and definitely we can write more elegant and pythonic code by implementing these special methods.</p>\n<p>However, our cards still cannot be shuffled so far. We&#39;ll not talk about it now, although it&#39;s easy enough to be implemented by a single line of code in <strong>__setitem__</strong>, it influences more important things and we&#39;ll talk about them together.</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>One of the best qualities of Python is its consistency.</p>\n<p align=\"right\">Luciano Ramalho, author of Fluent Python: Clear, Concise, and Effective Programming</p>\n\n</blockquote>\n<p>By the first time I read this sentence, all I felt was wired. As we all know, Python is a dynamically-typed language, you can never succeed in guessing the class or type of a variable\b. So at least, in terms of type, Python is far from consistent. However, soon I understand the meaning of consistency in Python: Nothing is special. Here, we&#39;re going to see several examples and understand what <em>&quot;consistency&quot;</em> really means in Python.</p>\n<blockquote>\n<p>Note: In Python, we&#39;re going to meet a lot of methods that looks like <strong>__getitem__</strong>, and we&#39;ll call them <em>&quot;dunder_getitem&quot;</em> (dunder means double-under). And also notice that, double under like <strong>__x</strong> has other meanings in Python, and please don&#39;t mess up with them.</p>\n</blockquote>\n<p>It&#39;s very important to implement those methods that can be called by the framework itself, we&#39;re going to show you how to implement two special methods called <strong>__getitem__</strong> and <strong>__len__</strong>.</p>\n<h2 id=\"1-1-Pythonic-Cards\"><a href=\"#1-1-Pythonic-Cards\" class=\"headerlink\" title=\"1.1 Pythonic Cards\"></a>1.1 Pythonic Cards</h2><p>Code 1-1: Cards with order.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> collections</span><br><span class=\"line\"></span><br><span class=\"line\">card = collections.namedtuple(<span class=\"string\">'Card'</span>, [<span class=\"string\">'rank'</span>, <span class=\"string\">'suit'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FrenchDeck</span>:</span></span><br><span class=\"line\">    ranks = [str(n) <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>, <span class=\"number\">11</span>)] + list(<span class=\"string\">'JQKA'</span>)</span><br><span class=\"line\">    suits = <span class=\"string\">'spades diamonds clubs hearts'</span>.split()</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self._cards = [Card(rank, suit) <span class=\"keyword\">for</span> suit <span class=\"keyword\">in</span> self.suits</span><br><span class=\"line\">                                        <span class=\"keyword\">for</span> rank <span class=\"keyword\">in</span> self.ranks]</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__len__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> len(self._cards)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getitem__</span><span class=\"params\">(self, position)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._cards[position]</span><br></pre></td></tr></table></figure></p>\n<p>Now, let&#39;s look at the <strong>FrenchDeck</strong> class. It&#39;s short and powerful. First of all, like any Python standard collection class, we can use <strong>len()</strong> function to check how many cards in it:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>deck = FrenchDeck()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>len(deck)</span><br><span class=\"line\"><span class=\"number\">52</span></span><br></pre></td></tr></table></figure></p>\n<p>We can also pick any specific card in the cards using <strong>[ ]</strong> like the following code:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>deck[<span class=\"number\">0</span>]</span><br><span class=\"line\">Card(rank=<span class=\"string\">'2'</span>, suit=<span class=\"string\">'spades'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>deck[<span class=\"number\">-1</span>]</span><br><span class=\"line\">Card(rank=<span class=\"string\">'A'</span>, suit=<span class=\"string\">'hearts'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>The more interesting thing is that, we don&#39;t need to write a new function to randomly pick a card, Python already had a function called <strong>random.choice</strong> to do the job, and we can just use it on the instance of our cards.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> random <span class=\"keyword\">import</span> choice</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>choice(deck)</span><br><span class=\"line\">Card(rank=<span class=\"string\">'4'</span>, suit=<span class=\"string\">'spades'</span>)</span><br></pre></td></tr></table></figure>\n<p>See! We already benefit from implementing special methods to use Python data model:</p>\n<ul>\n<li>The users of your class doesn&#39;t need to remember many different names of a standard manipulation (<strong>sizeof()</strong> or <strong>length()</strong> or something else).</li>\n<li>Just use Python standard library, no need for re-inventing the wheels.</li>\n</ul>\n<p>Even more, since <strong>__getitem__</strong> hands <strong>[ ]</strong> manipulation to <strong>self._cards</strong> list, so our <strong>deck</strong> class automatically supports slicing. See below:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>deck[: <span class=\"number\">3</span>]</span><br><span class=\"line\">[Card(rank=<span class=\"string\">'2'</span>, suit=<span class=\"string\">'spades'</span>),</span><br><span class=\"line\"> Card(rank=<span class=\"string\">'3'</span>, suit=<span class=\"string\">'spades'</span>),</span><br><span class=\"line\"> Card(rank=<span class=\"string\">'4'</span>, suit=<span class=\"string\">'spades'</span>)]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>deck[<span class=\"number\">12</span>:: <span class=\"number\">13</span>]</span><br><span class=\"line\">[Card(rank=<span class=\"string\">'A'</span>, suit=<span class=\"string\">'spades'</span>),</span><br><span class=\"line\"> Card(rank=<span class=\"string\">'A'</span>, suit=<span class=\"string\">'diamonds'</span>),</span><br><span class=\"line\"> Card(rank=<span class=\"string\">'A'</span>, suit=<span class=\"string\">'clubs'</span>),</span><br><span class=\"line\"> Card(rank=<span class=\"string\">'A'</span>, suit=<span class=\"string\">'hearts'</span>)]</span><br></pre></td></tr></table></figure>\n<p>The second function means that, pick all cards that has index 12, and pick one in every 13 cards.</p>\n<p>And even more! Just by implementing <strong>__getitem__</strong> method, the cards become iterable:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> card <span class=\"keyword\">in</span> deck: <span class=\"comment\"># doctest: +ELLIPSIS</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    print(card)</span><br><span class=\"line\">Card(rank=<span class=\"string\">'2'</span>, suit=<span class=\"string\">'spades'</span>)</span><br><span class=\"line\">Card(rank=<span class=\"string\">'3'</span>, suit=<span class=\"string\">'spades'</span>)</span><br><span class=\"line\">Card(rank=<span class=\"string\">'4'</span>, suit=<span class=\"string\">'spades'</span>)</span><br><span class=\"line\">Card(rank=<span class=\"string\">'5'</span>, suit=<span class=\"string\">'spades'</span>)</span><br><span class=\"line\">...v</span><br></pre></td></tr></table></figure></p>\n<p>Just by implementing <strong>__getitem__</strong> and <strong>_\\len__</strong> methods, <strong>FrenchDeck</strong> class is just like any sequential data model in Python, showing core features of Python (like iterating and slicing). It can also be used for standard libraries like <strong>random.choice</strong>, <strong>reversed</strong> and <strong>sorted</strong>.</p>\n<p>Here, we see how consistency exists in Python, and definitely we can write more elegant and pythonic code by implementing these special methods.</p>\n<p>However, our cards still cannot be shuffled so far. We&#39;ll not talk about it now, although it&#39;s easy enough to be implemented by a single line of code in <strong>__setitem__</strong>, it influences more important things and we&#39;ll talk about them together.</p>\n"},{"title":"Data Model, Special Methods","date":"2018-12-06T13:39:46.000Z","_content":"\n\nIn the last {% post_link python1 blog %}, we had a slight feeling about the magical things that special methods can do. This time, we'll talk deeper into how to use those special methods.\n\n## 1.2 How to Use Special Methods\n\n> Specially, we have to be clear that, special methods are designed to be called by Python interpreter, and not by YOU.\n\nIn most cases, we don't write something like **my\\_object.\\_\\_len\\_\\_()**. Just like we mentioned, everything in Python is trying to stay in consistency, so when we write **len(my\\_object)**, and the **my\\_object** is a user_defined class, Python will call the **\\_\\_len\\_\\_()** instance method you implemented. Again, such consistency is the key point that Python can get rid of a huge mess.\n\nEven more, for some built-in types like **list, str, bytearray**, and so on, the interpreter may take some short-cut when a special function is called. For example, the CPython implementation of **len()** actually returns the value of **ob_size** field in the **PyVarObject** C struct, that represents the variable-size built-in object in memory. Of course this is much faster than calling a method.\n\nMore often than not, the calling of special methods is implicit. Like **for i in x:**, indeed it cause the invocation of **iter(x)**, which in turn may call **\\_\\_iter\\_\\_()** if it's available. (This also indicates that, if we implemented our own **\\_\\_iter\\_\\_()** in our user-defined class, we may use **for i in my_object:**), see an example!\n\n```python\n>>> class MyClass:\n...     def __init__(self, n):\n...         self.a = []\n...         for i in range(0, n):\n...             self.a.append(i)\n...     \n...     def __iter__(self):\n...         curr = 0\n...         while curr < len(self.a):\n...             yield self.a[curr]\n...             curr += 1\n... \n>>> my_object = MyClass(3)\n>>> \n>>> for ele in my_object:\n...     print(ele)\n... \n0\n1\n2\n\n\n```\nSimply by implementing a **\\_\\_iter\\_\\_()**, we made our user-defined class supporting the most frequently used built-in syntax.\n\nNormally, your code should not call those special methods directly too often. Unless you're doing metaprogramming, you should be implementing those special methods much more often than invoking them explicitly. Perhaps the only special methods that you may call frequently is the **\\_\\_init\\_\\_()**, to invoke the initializer of a superclass in your own **\\_\\_init\\_\\_()** implementation.\n\nIf you want to use a special method, it is recommended that call them by calling the built-in functions (e.g, **len, iter, str**, etc). There functions does the job you want them to do, normally with some extra benefits. And for some built-in class, they can be faster (like the **len()** we introduced just now).\n\nBesides, please avoid adding custom special methods arbitrarily. The name like **\\_\\_foo()\\_\\_** may haven't been occupied now, but who knows about the future?\b\n\n## 1.2.1 Emulating Numeric Types\n\nSeveral special methods allow user object to respond to operators such as +. We'll go through a simple example to see how special methods works.\n\nWe'll implement a class to represent two-dimensional vectors (and more dimensions in the future). The built-in **complex** type can be used to represent two dimensional vectors, but when talking about more dimensions, we'll need our own class, and we want them to support built-in operators. Here're how we do it.\n\nWe will start by designing the API for such a class by writing a simulated console session that we use later as a doctest. Here's what we want.\n\n```python\n>>> a = Vector(1, 2)\n>>> b = Vector(2, 1)\n>>> a + b\nVector(3, 3)\n```\nThe **abs** built-in function returns the absolute value of integers and floats, and magnitude of **complex** numbers. So to be consistent, our API should use **abs** to calculate the magnitude of a vector:\n\n```python\n>>> v = Vector(3, 4)\n>>> abs(v)\n5.0\n```\nAnd also the * operator for scalar multiplication (Notice, this is not a dot multiplication for two vectors)\n\n```python\n>>> v * 3\nVector(9, 12)\n```\n\nAlso notice that, the printed information is under user definition. It's pretty simple to make it, just implement a special method called **\b\\_\\_repr\\_\\_()**.\n\nSo, all in all, in order to make all the functions above work, the special methods we need to implement are: **\\_\\_repr\\_\\_(), \\_\\_abs\\_\\_(), \\_\\_add\\_\\_()**, and  **\\_\\_mul\\_\\_()**\n\n\n```python\nclass Vector:\n    \n    def __init__(self, x=0, y=0):\n        self.x = x\n        self.y = y\n        \n    def __repr__(self):\n        return \"Vector(%r, %r)\" % (self.x, self.y)\n    \n    def __abs__(self):\n        return hypot(self.x, self.y)\n    \n    def __bool__(self):\n        return bool(abs(self))\n    \n    def __add__(self, other):\n        x = self.x + other.x\n        y = self.y + other.y\n        return Vector(x, y)\n    \n    def __mul__(self, scalar):\n        return Vector(self.x * scalar, self.y * scalar)\n\n```\n\nAlthough there 6 special methods in the code, but none of them will be invoked by in it's own code( except for **\\_\\_init\\_\\_()**). Even some other code may want to use these methods, they don't explicitly call them, just like what we can see in the console listings. Then let's discuss the code for each special method.\n\n### 1.2.2 String representation.\n\nThe **\\_\\_repr\\_\\_()** is called by the **repr** built-in to get the string presentation of the instance for inspection. If we didn't implement it, the string returned would look like something like this:\n\n```python\n>>> Vector(1,1)\n<Vector object at 0x10e380400>\n```\n\nThe string returned by **\\_\\_repr\\_\\_()** should be unambiguous, and, if possible, match the source code necessary to re-create the object being represented. This is why the our **\\_\\_repr\\_\\_()** would return a string looks calling the constructor of the class.\n\nThere's a similar special method called **\\_\\_str\\_\\_()**, which is called by the **str()** constructor and implicitly used by the print function. Basically, **\\_\\_str\\_\\_()** should return a string suitable for display to end users.\n\nWhen you only implement one of the both, implement **\\_\\_repr\\_\\_()**, because Python will call **\\_\\_repr\\_\\_()** when **\\_\\_str\\_\\_()** is not available as a fallback.\n\n### 1.2.3 Arithmetic Operators\nWe've already seen how to implement our own + and * by implementing **\\_\\_add\\_\\_** and **\\_\\_mul\\_\\_**. Note that, in both cases, the original object is not changed, and the method returned a new instance of the class. The principal of infix operators is to create new objects and leave the parameters untouched.\n\n### 1.2.4 Boolean Value of a Custom Type\nAlthough we have boolean type in Python, almost any object can be applied to a boolean context, such as a expression controlled by **if** or **while**. To do so, python will call **bool(x)**, and it only returns either **True** or **False**.\n\nBy default, an instance of our self-defined class is always **True**, unless we implemented the **\\_\\_bool\\_\\_** or **\\_\\_len\\_\\_**. **bool(x)** basically calls **x.\\_\\_bool\\_\\_()** and returns the result. If it's not implemented, Python would try to invoke **x.\\_\\_len\\_\\_()** instead. If it returns 0, then **False**; Otherwise, **True**.\n\n### More Special Methods.\nThe special methods are list in [Python official site](https://docs.python.org/3/reference/datamodel.html#specialnames). Check them!","source":"_posts/python2.md","raw":"---\ntitle: 'Data Model, Special Methods'\ntags:\n  - Python\n  - Engineer\n  - Programming\ncategories:\n  - Computer Science\ndate: 2018-12-06 22:39:46\n---\n\n\nIn the last {% post_link python1 blog %}, we had a slight feeling about the magical things that special methods can do. This time, we'll talk deeper into how to use those special methods.\n\n## 1.2 How to Use Special Methods\n\n> Specially, we have to be clear that, special methods are designed to be called by Python interpreter, and not by YOU.\n\nIn most cases, we don't write something like **my\\_object.\\_\\_len\\_\\_()**. Just like we mentioned, everything in Python is trying to stay in consistency, so when we write **len(my\\_object)**, and the **my\\_object** is a user_defined class, Python will call the **\\_\\_len\\_\\_()** instance method you implemented. Again, such consistency is the key point that Python can get rid of a huge mess.\n\nEven more, for some built-in types like **list, str, bytearray**, and so on, the interpreter may take some short-cut when a special function is called. For example, the CPython implementation of **len()** actually returns the value of **ob_size** field in the **PyVarObject** C struct, that represents the variable-size built-in object in memory. Of course this is much faster than calling a method.\n\nMore often than not, the calling of special methods is implicit. Like **for i in x:**, indeed it cause the invocation of **iter(x)**, which in turn may call **\\_\\_iter\\_\\_()** if it's available. (This also indicates that, if we implemented our own **\\_\\_iter\\_\\_()** in our user-defined class, we may use **for i in my_object:**), see an example!\n\n```python\n>>> class MyClass:\n...     def __init__(self, n):\n...         self.a = []\n...         for i in range(0, n):\n...             self.a.append(i)\n...     \n...     def __iter__(self):\n...         curr = 0\n...         while curr < len(self.a):\n...             yield self.a[curr]\n...             curr += 1\n... \n>>> my_object = MyClass(3)\n>>> \n>>> for ele in my_object:\n...     print(ele)\n... \n0\n1\n2\n\n\n```\nSimply by implementing a **\\_\\_iter\\_\\_()**, we made our user-defined class supporting the most frequently used built-in syntax.\n\nNormally, your code should not call those special methods directly too often. Unless you're doing metaprogramming, you should be implementing those special methods much more often than invoking them explicitly. Perhaps the only special methods that you may call frequently is the **\\_\\_init\\_\\_()**, to invoke the initializer of a superclass in your own **\\_\\_init\\_\\_()** implementation.\n\nIf you want to use a special method, it is recommended that call them by calling the built-in functions (e.g, **len, iter, str**, etc). There functions does the job you want them to do, normally with some extra benefits. And for some built-in class, they can be faster (like the **len()** we introduced just now).\n\nBesides, please avoid adding custom special methods arbitrarily. The name like **\\_\\_foo()\\_\\_** may haven't been occupied now, but who knows about the future?\b\n\n## 1.2.1 Emulating Numeric Types\n\nSeveral special methods allow user object to respond to operators such as +. We'll go through a simple example to see how special methods works.\n\nWe'll implement a class to represent two-dimensional vectors (and more dimensions in the future). The built-in **complex** type can be used to represent two dimensional vectors, but when talking about more dimensions, we'll need our own class, and we want them to support built-in operators. Here're how we do it.\n\nWe will start by designing the API for such a class by writing a simulated console session that we use later as a doctest. Here's what we want.\n\n```python\n>>> a = Vector(1, 2)\n>>> b = Vector(2, 1)\n>>> a + b\nVector(3, 3)\n```\nThe **abs** built-in function returns the absolute value of integers and floats, and magnitude of **complex** numbers. So to be consistent, our API should use **abs** to calculate the magnitude of a vector:\n\n```python\n>>> v = Vector(3, 4)\n>>> abs(v)\n5.0\n```\nAnd also the * operator for scalar multiplication (Notice, this is not a dot multiplication for two vectors)\n\n```python\n>>> v * 3\nVector(9, 12)\n```\n\nAlso notice that, the printed information is under user definition. It's pretty simple to make it, just implement a special method called **\b\\_\\_repr\\_\\_()**.\n\nSo, all in all, in order to make all the functions above work, the special methods we need to implement are: **\\_\\_repr\\_\\_(), \\_\\_abs\\_\\_(), \\_\\_add\\_\\_()**, and  **\\_\\_mul\\_\\_()**\n\n\n```python\nclass Vector:\n    \n    def __init__(self, x=0, y=0):\n        self.x = x\n        self.y = y\n        \n    def __repr__(self):\n        return \"Vector(%r, %r)\" % (self.x, self.y)\n    \n    def __abs__(self):\n        return hypot(self.x, self.y)\n    \n    def __bool__(self):\n        return bool(abs(self))\n    \n    def __add__(self, other):\n        x = self.x + other.x\n        y = self.y + other.y\n        return Vector(x, y)\n    \n    def __mul__(self, scalar):\n        return Vector(self.x * scalar, self.y * scalar)\n\n```\n\nAlthough there 6 special methods in the code, but none of them will be invoked by in it's own code( except for **\\_\\_init\\_\\_()**). Even some other code may want to use these methods, they don't explicitly call them, just like what we can see in the console listings. Then let's discuss the code for each special method.\n\n### 1.2.2 String representation.\n\nThe **\\_\\_repr\\_\\_()** is called by the **repr** built-in to get the string presentation of the instance for inspection. If we didn't implement it, the string returned would look like something like this:\n\n```python\n>>> Vector(1,1)\n<Vector object at 0x10e380400>\n```\n\nThe string returned by **\\_\\_repr\\_\\_()** should be unambiguous, and, if possible, match the source code necessary to re-create the object being represented. This is why the our **\\_\\_repr\\_\\_()** would return a string looks calling the constructor of the class.\n\nThere's a similar special method called **\\_\\_str\\_\\_()**, which is called by the **str()** constructor and implicitly used by the print function. Basically, **\\_\\_str\\_\\_()** should return a string suitable for display to end users.\n\nWhen you only implement one of the both, implement **\\_\\_repr\\_\\_()**, because Python will call **\\_\\_repr\\_\\_()** when **\\_\\_str\\_\\_()** is not available as a fallback.\n\n### 1.2.3 Arithmetic Operators\nWe've already seen how to implement our own + and * by implementing **\\_\\_add\\_\\_** and **\\_\\_mul\\_\\_**. Note that, in both cases, the original object is not changed, and the method returned a new instance of the class. The principal of infix operators is to create new objects and leave the parameters untouched.\n\n### 1.2.4 Boolean Value of a Custom Type\nAlthough we have boolean type in Python, almost any object can be applied to a boolean context, such as a expression controlled by **if** or **while**. To do so, python will call **bool(x)**, and it only returns either **True** or **False**.\n\nBy default, an instance of our self-defined class is always **True**, unless we implemented the **\\_\\_bool\\_\\_** or **\\_\\_len\\_\\_**. **bool(x)** basically calls **x.\\_\\_bool\\_\\_()** and returns the result. If it's not implemented, Python would try to invoke **x.\\_\\_len\\_\\_()** instead. If it returns 0, then **False**; Otherwise, **True**.\n\n### More Special Methods.\nThe special methods are list in [Python official site](https://docs.python.org/3/reference/datamodel.html#specialnames). Check them!","slug":"python2","published":1,"updated":"2018-12-06T13:39:46.225Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpjdw5es000kh711k959pq13","content":"<p>In the last <a href=\"/2018/10/28/python1/\" title=\"blog\">blog</a>, we had a slight feeling about the magical things that special methods can do. This time, we&#39;ll talk deeper into how to use those special methods.</p>\n<h2 id=\"12-how-to-use-special-methods\"><a href=\"#1-2-How-to-Use-Special-Methods\" class=\"headerlink\" title=\"1.2 How to Use Special Methods\"></a>1.2 How to Use Special Methods</h2><blockquote>\n<p>Specially, we have to be clear that, special methods are designed to be called by Python interpreter, and not by YOU.</p>\n</blockquote>\n<p>In most cases, we don&#39;t write something like <strong>my_object.__len__()</strong>. Just like we mentioned, everything in Python is trying to stay in consistency, so when we write <strong>len(my_object)</strong>, and the <strong>my_object</strong> is a user<em>defined class, Python will call the **\\</em>_len__()** instance method you implemented. Again, such consistency is the key point that Python can get rid of a huge mess.</p>\n<p>Even more, for some built-in types like <strong>list, str, bytearray</strong>, and so on, the interpreter may take some short-cut when a special function is called. For example, the CPython implementation of <strong>len()</strong> actually returns the value of <strong>ob_size</strong> field in the <strong>PyVarObject</strong> C struct, that represents the variable-size built-in object in memory. Of course this is much faster than calling a method.</p>\n<p>More often than not, the calling of special methods is implicit. Like <strong>for i in x:</strong>, indeed it cause the invocation of <strong>iter(x)</strong>, which in turn may call <strong>__iter__()</strong> if it&#39;s available. (This also indicates that, if we implemented our own <strong>__iter__()</strong> in our user-defined class, we may use <strong>for i in my_object:</strong>), see an example!</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, n)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>        self.a = []</span><br><span class=\"line\"><span class=\"meta\">... </span>        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, n):</span><br><span class=\"line\"><span class=\"meta\">... </span>            self.a.append(i)</span><br><span class=\"line\"><span class=\"meta\">... </span>    </span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>        curr = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta\">... </span>        <span class=\"keyword\">while</span> curr &lt; len(self.a):</span><br><span class=\"line\"><span class=\"meta\">... </span>            <span class=\"keyword\">yield</span> self.a[curr]</span><br><span class=\"line\"><span class=\"meta\">... </span>            curr += <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_object = MyClass(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> ele <span class=\"keyword\">in</span> my_object:</span><br><span class=\"line\"><span class=\"meta\">... </span>    print(ele)</span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>Simply by implementing a <strong>__iter__()</strong>, we made our user-defined class supporting the most frequently used built-in syntax.</p>\n<p>Normally, your code should not call those special methods directly too often. Unless you&#39;re doing metaprogramming, you should be implementing those special methods much more often than invoking them explicitly. Perhaps the only special methods that you may call frequently is the <strong>__init__()</strong>, to invoke the initializer of a superclass in your own <strong>__init__()</strong> implementation.</p>\n<p>If you want to use a special method, it is recommended that call them by calling the built-in functions (e.g, <strong>len, iter, str</strong>, etc). There functions does the job you want them to do, normally with some extra benefits. And for some built-in class, they can be faster (like the <strong>len()</strong> we introduced just now).</p>\n<p>Besides, please avoid adding custom special methods arbitrarily. The name like <strong>__foo()__</strong> may haven&#39;t been occupied now, but who knows about the future?\b</p>\n<h2 id=\"121-emulating-numeric-types\"><a href=\"#1-2-1-Emulating-Numeric-Types\" class=\"headerlink\" title=\"1.2.1 Emulating Numeric Types\"></a>1.2.1 Emulating Numeric Types</h2><p>Several special methods allow user object to respond to operators such as +. We&#39;ll go through a simple example to see how special methods works.</p>\n<p>We&#39;ll implement a class to represent two-dimensional vectors (and more dimensions in the future). The built-in <strong>complex</strong> type can be used to represent two dimensional vectors, but when talking about more dimensions, we&#39;ll need our own class, and we want them to support built-in operators. Here&#39;re how we do it.</p>\n<p>We will start by designing the API for such a class by writing a simulated console session that we use later as a doctest. Here&#39;s what we want.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = Vector(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = Vector(<span class=\"number\">2</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a + b</span><br><span class=\"line\">Vector(<span class=\"number\">3</span>, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<p>The <strong>abs</strong> built-in function returns the absolute value of integers and floats, and magnitude of <strong>complex</strong> numbers. So to be consistent, our API should use <strong>abs</strong> to calculate the magnitude of a vector:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>v = Vector(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>abs(v)</span><br><span class=\"line\"><span class=\"number\">5.0</span></span><br></pre></td></tr></table></figure>\n<p>And also the * operator for scalar multiplication (Notice, this is not a dot multiplication for two vectors)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>v * <span class=\"number\">3</span></span><br><span class=\"line\">Vector(<span class=\"number\">9</span>, <span class=\"number\">12</span>)</span><br></pre></td></tr></table></figure>\n<p>Also notice that, the printed information is under user definition. It&#39;s pretty simple to make it, just implement a special method called <strong>\b__repr__()</strong>.</p>\n<p>So, all in all, in order to make all the functions above work, the special methods we need to implement are: <strong>__repr__(), __abs__(), __add__()</strong>, and  <strong>__mul__()</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector</span>:</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, x=<span class=\"number\">0</span>, y=<span class=\"number\">0</span>)</span>:</span></span><br><span class=\"line\">        self.x = x</span><br><span class=\"line\">        self.y = y</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Vector(%r, %r)\"</span> % (self.x, self.y)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__abs__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> hypot(self.x, self.y)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__bool__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> bool(abs(self))</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__add__</span><span class=\"params\">(self, other)</span>:</span></span><br><span class=\"line\">        x = self.x + other.x</span><br><span class=\"line\">        y = self.y + other.y</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Vector(x, y)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__mul__</span><span class=\"params\">(self, scalar)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Vector(self.x * scalar, self.y * scalar)</span><br></pre></td></tr></table></figure>\n<p>Although there 6 special methods in the code, but none of them will be invoked by in it&#39;s own code( except for <strong>__init__()</strong>). Even some other code may want to use these methods, they don&#39;t explicitly call them, just like what we can see in the console listings. Then let&#39;s discuss the code for each special method.</p>\n<h3 id=\"122-string-representation\"><a href=\"#1-2-2-String-representation\" class=\"headerlink\" title=\"1.2.2 String representation.\"></a>1.2.2 String representation.</h3><p>The <strong>__repr__()</strong> is called by the <strong>repr</strong> built-in to get the string presentation of the instance for inspection. If we didn&#39;t implement it, the string returned would look like something like this:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Vector(<span class=\"number\">1</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">&lt;Vector object at <span class=\"number\">0x10e380400</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>The string returned by <strong>__repr__()</strong> should be unambiguous, and, if possible, match the source code necessary to re-create the object being represented. This is why the our <strong>__repr__()</strong> would return a string looks calling the constructor of the class.</p>\n<p>There&#39;s a similar special method called <strong>__str__()</strong>, which is called by the <strong>str()</strong> constructor and implicitly used by the print function. Basically, <strong>__str__()</strong> should return a string suitable for display to end users.</p>\n<p>When you only implement one of the both, implement <strong>__repr__()</strong>, because Python will call <strong>__repr__()</strong> when <strong>__str__()</strong> is not available as a fallback.</p>\n<h3 id=\"123-arithmetic-operators\"><a href=\"#1-2-3-Arithmetic-Operators\" class=\"headerlink\" title=\"1.2.3 Arithmetic Operators\"></a>1.2.3 Arithmetic Operators</h3><p>We&#39;ve already seen how to implement our own + and <em> by implementing <strong>__add__</strong> and <em>*__mul__</em></em>. Note that, in both cases, the original object is not changed, and the method returned a new instance of the class. The principal of infix operators is to create new objects and leave the parameters untouched.</p>\n<h3 id=\"124-boolean-value-of-a-custom-type\"><a href=\"#1-2-4-Boolean-Value-of-a-Custom-Type\" class=\"headerlink\" title=\"1.2.4 Boolean Value of a Custom Type\"></a>1.2.4 Boolean Value of a Custom Type</h3><p>Although we have boolean type in Python, almost any object can be applied to a boolean context, such as a expression controlled by <strong>if</strong> or <strong>while</strong>. To do so, python will call <strong>bool(x)</strong>, and it only returns either <strong>True</strong> or <strong>False</strong>.</p>\n<p>By default, an instance of our self-defined class is always <strong>True</strong>, unless we implemented the <strong>__bool__</strong> or <strong>__len__</strong>. <strong>bool(x)</strong> basically calls <strong>x.__bool__()</strong> and returns the result. If it&#39;s not implemented, Python would try to invoke <strong>x.__len__()</strong> instead. If it returns 0, then <strong>False</strong>; Otherwise, <strong>True</strong>.</p>\n<h3 id=\"more-special-methods\"><a href=\"#More-Special-Methods\" class=\"headerlink\" title=\"More Special Methods.\"></a>More Special Methods.</h3><p>The special methods are list in <a href=\"https://docs.python.org/3/reference/datamodel.html#specialnames\" target=\"_blank\" rel=\"noopener\">Python official site</a>. Check them!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>In the last <a href=\"/2018/10/28/python1/\" title=\"blog\">blog</a>, we had a slight feeling about the magical things that special methods can do. This time, we&#39;ll talk deeper into how to use those special methods.</p>\n<h2 id=\"1-2-How-to-Use-Special-Methods\"><a href=\"#1-2-How-to-Use-Special-Methods\" class=\"headerlink\" title=\"1.2 How to Use Special Methods\"></a>1.2 How to Use Special Methods</h2><blockquote>\n<p>Specially, we have to be clear that, special methods are designed to be called by Python interpreter, and not by YOU.</p>\n</blockquote>\n<p>In most cases, we don&#39;t write something like <strong>my_object.__len__()</strong>. Just like we mentioned, everything in Python is trying to stay in consistency, so when we write <strong>len(my_object)</strong>, and the <strong>my_object</strong> is a user<em>defined class, Python will call the **\\</em>_len__()** instance method you implemented. Again, such consistency is the key point that Python can get rid of a huge mess.</p>\n<p>Even more, for some built-in types like <strong>list, str, bytearray</strong>, and so on, the interpreter may take some short-cut when a special function is called. For example, the CPython implementation of <strong>len()</strong> actually returns the value of <strong>ob_size</strong> field in the <strong>PyVarObject</strong> C struct, that represents the variable-size built-in object in memory. Of course this is much faster than calling a method.</p>\n<p>More often than not, the calling of special methods is implicit. Like <strong>for i in x:</strong>, indeed it cause the invocation of <strong>iter(x)</strong>, which in turn may call <strong>__iter__()</strong> if it&#39;s available. (This also indicates that, if we implemented our own <strong>__iter__()</strong> in our user-defined class, we may use <strong>for i in my_object:</strong>), see an example!</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, n)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>        self.a = []</span><br><span class=\"line\"><span class=\"meta\">... </span>        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>, n):</span><br><span class=\"line\"><span class=\"meta\">... </span>            self.a.append(i)</span><br><span class=\"line\"><span class=\"meta\">... </span>    </span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__iter__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>        curr = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta\">... </span>        <span class=\"keyword\">while</span> curr &lt; len(self.a):</span><br><span class=\"line\"><span class=\"meta\">... </span>            <span class=\"keyword\">yield</span> self.a[curr]</span><br><span class=\"line\"><span class=\"meta\">... </span>            curr += <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>my_object = MyClass(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> ele <span class=\"keyword\">in</span> my_object:</span><br><span class=\"line\"><span class=\"meta\">... </span>    print(ele)</span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>Simply by implementing a <strong>__iter__()</strong>, we made our user-defined class supporting the most frequently used built-in syntax.</p>\n<p>Normally, your code should not call those special methods directly too often. Unless you&#39;re doing metaprogramming, you should be implementing those special methods much more often than invoking them explicitly. Perhaps the only special methods that you may call frequently is the <strong>__init__()</strong>, to invoke the initializer of a superclass in your own <strong>__init__()</strong> implementation.</p>\n<p>If you want to use a special method, it is recommended that call them by calling the built-in functions (e.g, <strong>len, iter, str</strong>, etc). There functions does the job you want them to do, normally with some extra benefits. And for some built-in class, they can be faster (like the <strong>len()</strong> we introduced just now).</p>\n<p>Besides, please avoid adding custom special methods arbitrarily. The name like <strong>__foo()__</strong> may haven&#39;t been occupied now, but who knows about the future?\b</p>\n<h2 id=\"1-2-1-Emulating-Numeric-Types\"><a href=\"#1-2-1-Emulating-Numeric-Types\" class=\"headerlink\" title=\"1.2.1 Emulating Numeric Types\"></a>1.2.1 Emulating Numeric Types</h2><p>Several special methods allow user object to respond to operators such as +. We&#39;ll go through a simple example to see how special methods works.</p>\n<p>We&#39;ll implement a class to represent two-dimensional vectors (and more dimensions in the future). The built-in <strong>complex</strong> type can be used to represent two dimensional vectors, but when talking about more dimensions, we&#39;ll need our own class, and we want them to support built-in operators. Here&#39;re how we do it.</p>\n<p>We will start by designing the API for such a class by writing a simulated console session that we use later as a doctest. Here&#39;s what we want.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = Vector(<span class=\"number\">1</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = Vector(<span class=\"number\">2</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a + b</span><br><span class=\"line\">Vector(<span class=\"number\">3</span>, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<p>The <strong>abs</strong> built-in function returns the absolute value of integers and floats, and magnitude of <strong>complex</strong> numbers. So to be consistent, our API should use <strong>abs</strong> to calculate the magnitude of a vector:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>v = Vector(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>abs(v)</span><br><span class=\"line\"><span class=\"number\">5.0</span></span><br></pre></td></tr></table></figure>\n<p>And also the * operator for scalar multiplication (Notice, this is not a dot multiplication for two vectors)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>v * <span class=\"number\">3</span></span><br><span class=\"line\">Vector(<span class=\"number\">9</span>, <span class=\"number\">12</span>)</span><br></pre></td></tr></table></figure>\n<p>Also notice that, the printed information is under user definition. It&#39;s pretty simple to make it, just implement a special method called <strong>\b__repr__()</strong>.</p>\n<p>So, all in all, in order to make all the functions above work, the special methods we need to implement are: <strong>__repr__(), __abs__(), __add__()</strong>, and  <strong>__mul__()</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector</span>:</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, x=<span class=\"number\">0</span>, y=<span class=\"number\">0</span>)</span>:</span></span><br><span class=\"line\">        self.x = x</span><br><span class=\"line\">        self.y = y</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Vector(%r, %r)\"</span> % (self.x, self.y)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__abs__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> hypot(self.x, self.y)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__bool__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> bool(abs(self))</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__add__</span><span class=\"params\">(self, other)</span>:</span></span><br><span class=\"line\">        x = self.x + other.x</span><br><span class=\"line\">        y = self.y + other.y</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Vector(x, y)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__mul__</span><span class=\"params\">(self, scalar)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Vector(self.x * scalar, self.y * scalar)</span><br></pre></td></tr></table></figure>\n<p>Although there 6 special methods in the code, but none of them will be invoked by in it&#39;s own code( except for <strong>__init__()</strong>). Even some other code may want to use these methods, they don&#39;t explicitly call them, just like what we can see in the console listings. Then let&#39;s discuss the code for each special method.</p>\n<h3 id=\"1-2-2-String-representation\"><a href=\"#1-2-2-String-representation\" class=\"headerlink\" title=\"1.2.2 String representation.\"></a>1.2.2 String representation.</h3><p>The <strong>__repr__()</strong> is called by the <strong>repr</strong> built-in to get the string presentation of the instance for inspection. If we didn&#39;t implement it, the string returned would look like something like this:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Vector(<span class=\"number\">1</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">&lt;Vector object at <span class=\"number\">0x10e380400</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>The string returned by <strong>__repr__()</strong> should be unambiguous, and, if possible, match the source code necessary to re-create the object being represented. This is why the our <strong>__repr__()</strong> would return a string looks calling the constructor of the class.</p>\n<p>There&#39;s a similar special method called <strong>__str__()</strong>, which is called by the <strong>str()</strong> constructor and implicitly used by the print function. Basically, <strong>__str__()</strong> should return a string suitable for display to end users.</p>\n<p>When you only implement one of the both, implement <strong>__repr__()</strong>, because Python will call <strong>__repr__()</strong> when <strong>__str__()</strong> is not available as a fallback.</p>\n<h3 id=\"1-2-3-Arithmetic-Operators\"><a href=\"#1-2-3-Arithmetic-Operators\" class=\"headerlink\" title=\"1.2.3 Arithmetic Operators\"></a>1.2.3 Arithmetic Operators</h3><p>We&#39;ve already seen how to implement our own + and <em> by implementing <strong>__add__</strong> and <em>*__mul__</em></em>. Note that, in both cases, the original object is not changed, and the method returned a new instance of the class. The principal of infix operators is to create new objects and leave the parameters untouched.</p>\n<h3 id=\"1-2-4-Boolean-Value-of-a-Custom-Type\"><a href=\"#1-2-4-Boolean-Value-of-a-Custom-Type\" class=\"headerlink\" title=\"1.2.4 Boolean Value of a Custom Type\"></a>1.2.4 Boolean Value of a Custom Type</h3><p>Although we have boolean type in Python, almost any object can be applied to a boolean context, such as a expression controlled by <strong>if</strong> or <strong>while</strong>. To do so, python will call <strong>bool(x)</strong>, and it only returns either <strong>True</strong> or <strong>False</strong>.</p>\n<p>By default, an instance of our self-defined class is always <strong>True</strong>, unless we implemented the <strong>__bool__</strong> or <strong>__len__</strong>. <strong>bool(x)</strong> basically calls <strong>x.__bool__()</strong> and returns the result. If it&#39;s not implemented, Python would try to invoke <strong>x.__len__()</strong> instead. If it returns 0, then <strong>False</strong>; Otherwise, <strong>True</strong>.</p>\n<h3 id=\"More-Special-Methods\"><a href=\"#More-Special-Methods\" class=\"headerlink\" title=\"More Special Methods.\"></a>More Special Methods.</h3><p>The special methods are list in <a href=\"https://docs.python.org/3/reference/datamodel.html#specialnames\" target=\"_blank\" rel=\"noopener\">Python official site</a>. Check them!</p>\n"},{"title":"Leetcode753. Cracking the safe","date":"2018-08-30T13:16:49.000Z","_content":"\nThis is a programming problem on leetcode, and the interesting part is, it can be solved with two different points of\nview. We're going to analyze the problem, prove some properties and lemma before we use them, at last write them into code.\nThe problem is as below:\n\n## Leetcode.753. Cracking the Safe\n\nThere is a box protected by a password. The password is **n** digits, where each letter can be one of the first **k** digits **0, 1, ..., k-1**.\n\nYou can keep inputting the password, the password will automatically be matched against the last **n** digits entered.\n\nFor example, assuming the password is **\"345\"**, I can open it when I type **\"012345\"**, but I enter a total of 6 digits.\n\nPlease return any string of minimum length that is guaranteed to open the box after the entire string is inputted.\n\n## Approach \\#1: Graph Theory.\nIt's easy to take this problem as a graph theory, \bLet's take any number with **n-1** digits as a vertex, to form a single and unique trial of the password, we extend a edge from this node, forming a **n** digits number. It also leads to the new node that was indicated by it's [1:n] digits. So this problem is turned in to a graph problem defined as below:\n\n*Given a directed graph with $k^{n-1}$ nodes, each nodes has $k$ edges, pointed to another node. Find a path that visits every edges exactly once.*\n\nSounds familiar, right? This is a very classic question in graph theory, called [Eulerian path](https://en.wikipedia.org/wiki/Eulerian_path). By definition, a Eulerian path is a trail in a finite graph which visits every edges exactly once. Eulerian cycle is an Eulerian path that starts and ends at the same vertex. Eulerian path and Eulerian cycle have following properties:\n- An undirected graph has an Eulerian cycle if and only if every vertex has even degree, and all of its vertices with nonzero degree belong to a single connected component.\n- A directed graph has an Eulerian cycle if and only if every vertex has equal in degree and out degree, and all of its vertices with nonzero degree belong to a single strongly connected component.\n  \nBoth properties are easy to prove: For the first property, for each node, it must have an edge in and an edge out, to form a Eulerian path. For the second property, it's still the same: for each node, one in, one out.\n\nTo solve this problem, we have a theory called *Hierholzer's Algorithm*. The algorithm goes as follows:\n- Starting from a vertex u, we walk through (unvisited) edges until we get stuck. Because the in-degrees and out-degrees of each node are equal, we can only get stuck at u, which forms a cycle.\n- Now, for any node v we had visited that has unvisited edges, we start a new cycle from v with the same procedure as above, and then merge the cycles together to form a new cycle.\n  \nAn figure below may helps you to understand the procedure.\n![](/images/leetcode753_1.png)\n\nNow the problem seems easy to solve. All we need to do is track every edge and mark them as visited. To prevent us from getting stuck (So we don't need extra memory to store unvisited edges), we start from 000...0, and go to the next node from k-1 to 0. The code is as followed:\n\n*java*\n\n```java\nclass Solution {\n    Set<String> seen;\n    StringBuilder ans;\n\n    public String crackSafe(int n, int k) {\n        if (n == 1 && k == 1) return \"0\";\n        seen = new HashSet();\n        ans = new StringBuilder();\n\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n-1; ++i)\n            sb.append(\"0\");\n        String start = sb.toString();\n\n        dfs(start, k);\n        ans.append(start);\n        return new String(ans);\n    }\n\n    public void dfs(String node, int k) {\n        for (int x = 0; x < k; ++x) {\n            String nei = node + x;\n            if (!seen.contains(nei)) {\n                seen.add(nei);\n                dfs(nei.substring(1), k);\n                ans.append(x);\n            }\n        }\n    }\n}\n```\n\n## Approach \\#2: Inverse Burrows-Wheeler Transform\b\nIf we are familiar with the theory of combinatorics on words, recall that a Lyndon Word L is a word that is the unique minimum of it's rotations.\n\nOne important mathematical result (due to Fredericksen and Maiorana), is that the concatenation in lexicographic order of Lyndon words with length dividing n, forms a de Bruijin sequence: a sequence where every every word (from the $k^n$​​ available) appears as a substring of length n (where we are allowed to wrap around.)\n\nFor example, when n = 6, k = 2, all the Lyndon words with length dividing n in lexicographic order are (spaces for convenience): 0 000001 000011 000101 000111 001 001011 001101 001111 01 010111 011 011111 1. It turns out this is the smallest de Bruijin sequence.\n\nWe can construct a de Bruijin sequence by Inverse Burrows-Wheeler Transform. Mathematically, an inverse Burrows—Wheeler transform on a word w generates a multi-set of equivalence classes consisting of strings and their rotations. These equivalence classes of strings each contain a Lyndon word as a unique minimum element, so the inverse Burrows—Wheeler transform can be considered to generate a set of Lyndon words. It can be shown that if we perform the inverse Burrows—Wheeler transform on a word w consisting of the size-k alphabet repeated $k^{n-1}$ times (so that it will produce a word the same length as the desired de Bruijn sequence), then the result will be the set of all Lyndon words whose length divides n. It follows that arranging these Lyndon words in lexicographic order will yield a de Bruijn sequence B(k,n), and that this will be the first de Bruijn sequence in lexicographic order. The following method can be used to perform the inverse Burrows—Wheeler transform, using its standard permutation:\n- Sort the characters in the string w, yielding a new string w'\n- Position the string w' above the string w, and map each letter's position in w' to its position in w while preserving order. This process defines the standard permutation.\n- Write this permutation in cycle notation with the smallest position in each cycle first, and the cycles sorted in increasing order.\n- For each cycle, replace each number with the corresponding letter from string w' in that position.\n- Each cycle has now become a Lyndon word, and they are arranged in lexicographic order, so dropping the parentheses yields the first de Bruijn sequence.\n\nFor example, to construct the smallest B(2,4) de Bruijn sequence of length 24 = 16, repeat the alphabet (ab) 8 times yielding w=abababababababab. Sort the characters in w, yielding w'=aaaaaaaabbbbbbbb. Position w' above w as shown, and map each element in w' to the corresponding element in w by drawing a line. Number the columns as shown so we can read the cycles of the permutation:\n![](/images/leetcode753_2.png)\n\nStarting from the left, the cycles are: (1) (2 3 5 9) (4 7 13 10) (6 11) (8 15 14 12) (16).\n\nThen, replacing each number by the corresponding letter in w' from that column yields: (a)(aaab)(aabb)(ab)(abbb)(b).\n\nThese are all of the Lyndon words whose length divides 4, in lexicographic order, so dropping the parentheses gives B(2,4) = aaaabaabbababbbb.\n\nThe code is as followed:\n```java\nclass Solution {\n    public String crackSafe(int n, int k) {\n        int M = (int) Math.pow(k, n-1);\n        int[] P = new int[M * k];\n        for (int i = 0; i < k; ++i)\n            for (int q = 0; q < M; ++q)\n                P[i*M + q] = q*k + i;\n\n        StringBuilder ans = new StringBuilder();\n        for (int i = 0; i < M*k; ++i) {\n            int j = i;\n            while (P[j] >= 0) {\n                ans.append(String.valueOf(j / M));\n                int v = P[j];\n                P[j] = -1;\n                j = v;\n            }\n        }\n\n        for (int i = 0; i < n-1; ++i)\n            ans.append(\"0\");\n        return new String(ans);\n    }\n}\n```\n-------\nThe most attractive part is that, at the first look into this problem, this does not look like a graph problem or a description problem. However, we can use the method from two different aspect to help us understand the problem in different point of view. If we look deeper into it, we can even found that, description, text problems and graph theories are closely related to each other, which showed the beauty of math and computer science.","source":"_posts/leetcode753.md","raw":"---\ntitle: Leetcode753. Cracking the safe\ntags:\n  - Leetcode\n  - Algorithm\n  - Graph Theory\n  - Sequence Algorithm\ncategories:\n  - Leetcode\ndate: 2018-08-30 22:16:49\n---\n\nThis is a programming problem on leetcode, and the interesting part is, it can be solved with two different points of\nview. We're going to analyze the problem, prove some properties and lemma before we use them, at last write them into code.\nThe problem is as below:\n\n## Leetcode.753. Cracking the Safe\n\nThere is a box protected by a password. The password is **n** digits, where each letter can be one of the first **k** digits **0, 1, ..., k-1**.\n\nYou can keep inputting the password, the password will automatically be matched against the last **n** digits entered.\n\nFor example, assuming the password is **\"345\"**, I can open it when I type **\"012345\"**, but I enter a total of 6 digits.\n\nPlease return any string of minimum length that is guaranteed to open the box after the entire string is inputted.\n\n## Approach \\#1: Graph Theory.\nIt's easy to take this problem as a graph theory, \bLet's take any number with **n-1** digits as a vertex, to form a single and unique trial of the password, we extend a edge from this node, forming a **n** digits number. It also leads to the new node that was indicated by it's [1:n] digits. So this problem is turned in to a graph problem defined as below:\n\n*Given a directed graph with $k^{n-1}$ nodes, each nodes has $k$ edges, pointed to another node. Find a path that visits every edges exactly once.*\n\nSounds familiar, right? This is a very classic question in graph theory, called [Eulerian path](https://en.wikipedia.org/wiki/Eulerian_path). By definition, a Eulerian path is a trail in a finite graph which visits every edges exactly once. Eulerian cycle is an Eulerian path that starts and ends at the same vertex. Eulerian path and Eulerian cycle have following properties:\n- An undirected graph has an Eulerian cycle if and only if every vertex has even degree, and all of its vertices with nonzero degree belong to a single connected component.\n- A directed graph has an Eulerian cycle if and only if every vertex has equal in degree and out degree, and all of its vertices with nonzero degree belong to a single strongly connected component.\n  \nBoth properties are easy to prove: For the first property, for each node, it must have an edge in and an edge out, to form a Eulerian path. For the second property, it's still the same: for each node, one in, one out.\n\nTo solve this problem, we have a theory called *Hierholzer's Algorithm*. The algorithm goes as follows:\n- Starting from a vertex u, we walk through (unvisited) edges until we get stuck. Because the in-degrees and out-degrees of each node are equal, we can only get stuck at u, which forms a cycle.\n- Now, for any node v we had visited that has unvisited edges, we start a new cycle from v with the same procedure as above, and then merge the cycles together to form a new cycle.\n  \nAn figure below may helps you to understand the procedure.\n![](/images/leetcode753_1.png)\n\nNow the problem seems easy to solve. All we need to do is track every edge and mark them as visited. To prevent us from getting stuck (So we don't need extra memory to store unvisited edges), we start from 000...0, and go to the next node from k-1 to 0. The code is as followed:\n\n*java*\n\n```java\nclass Solution {\n    Set<String> seen;\n    StringBuilder ans;\n\n    public String crackSafe(int n, int k) {\n        if (n == 1 && k == 1) return \"0\";\n        seen = new HashSet();\n        ans = new StringBuilder();\n\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < n-1; ++i)\n            sb.append(\"0\");\n        String start = sb.toString();\n\n        dfs(start, k);\n        ans.append(start);\n        return new String(ans);\n    }\n\n    public void dfs(String node, int k) {\n        for (int x = 0; x < k; ++x) {\n            String nei = node + x;\n            if (!seen.contains(nei)) {\n                seen.add(nei);\n                dfs(nei.substring(1), k);\n                ans.append(x);\n            }\n        }\n    }\n}\n```\n\n## Approach \\#2: Inverse Burrows-Wheeler Transform\b\nIf we are familiar with the theory of combinatorics on words, recall that a Lyndon Word L is a word that is the unique minimum of it's rotations.\n\nOne important mathematical result (due to Fredericksen and Maiorana), is that the concatenation in lexicographic order of Lyndon words with length dividing n, forms a de Bruijin sequence: a sequence where every every word (from the $k^n$​​ available) appears as a substring of length n (where we are allowed to wrap around.)\n\nFor example, when n = 6, k = 2, all the Lyndon words with length dividing n in lexicographic order are (spaces for convenience): 0 000001 000011 000101 000111 001 001011 001101 001111 01 010111 011 011111 1. It turns out this is the smallest de Bruijin sequence.\n\nWe can construct a de Bruijin sequence by Inverse Burrows-Wheeler Transform. Mathematically, an inverse Burrows—Wheeler transform on a word w generates a multi-set of equivalence classes consisting of strings and their rotations. These equivalence classes of strings each contain a Lyndon word as a unique minimum element, so the inverse Burrows—Wheeler transform can be considered to generate a set of Lyndon words. It can be shown that if we perform the inverse Burrows—Wheeler transform on a word w consisting of the size-k alphabet repeated $k^{n-1}$ times (so that it will produce a word the same length as the desired de Bruijn sequence), then the result will be the set of all Lyndon words whose length divides n. It follows that arranging these Lyndon words in lexicographic order will yield a de Bruijn sequence B(k,n), and that this will be the first de Bruijn sequence in lexicographic order. The following method can be used to perform the inverse Burrows—Wheeler transform, using its standard permutation:\n- Sort the characters in the string w, yielding a new string w'\n- Position the string w' above the string w, and map each letter's position in w' to its position in w while preserving order. This process defines the standard permutation.\n- Write this permutation in cycle notation with the smallest position in each cycle first, and the cycles sorted in increasing order.\n- For each cycle, replace each number with the corresponding letter from string w' in that position.\n- Each cycle has now become a Lyndon word, and they are arranged in lexicographic order, so dropping the parentheses yields the first de Bruijn sequence.\n\nFor example, to construct the smallest B(2,4) de Bruijn sequence of length 24 = 16, repeat the alphabet (ab) 8 times yielding w=abababababababab. Sort the characters in w, yielding w'=aaaaaaaabbbbbbbb. Position w' above w as shown, and map each element in w' to the corresponding element in w by drawing a line. Number the columns as shown so we can read the cycles of the permutation:\n![](/images/leetcode753_2.png)\n\nStarting from the left, the cycles are: (1) (2 3 5 9) (4 7 13 10) (6 11) (8 15 14 12) (16).\n\nThen, replacing each number by the corresponding letter in w' from that column yields: (a)(aaab)(aabb)(ab)(abbb)(b).\n\nThese are all of the Lyndon words whose length divides 4, in lexicographic order, so dropping the parentheses gives B(2,4) = aaaabaabbababbbb.\n\nThe code is as followed:\n```java\nclass Solution {\n    public String crackSafe(int n, int k) {\n        int M = (int) Math.pow(k, n-1);\n        int[] P = new int[M * k];\n        for (int i = 0; i < k; ++i)\n            for (int q = 0; q < M; ++q)\n                P[i*M + q] = q*k + i;\n\n        StringBuilder ans = new StringBuilder();\n        for (int i = 0; i < M*k; ++i) {\n            int j = i;\n            while (P[j] >= 0) {\n                ans.append(String.valueOf(j / M));\n                int v = P[j];\n                P[j] = -1;\n                j = v;\n            }\n        }\n\n        for (int i = 0; i < n-1; ++i)\n            ans.append(\"0\");\n        return new String(ans);\n    }\n}\n```\n-------\nThe most attractive part is that, at the first look into this problem, this does not look like a graph problem or a description problem. However, we can use the method from two different aspect to help us understand the problem in different point of view. If we look deeper into it, we can even found that, description, text problems and graph theories are closely related to each other, which showed the beauty of math and computer science.","slug":"leetcode753","published":1,"updated":"2018-08-30T13:20:18.084Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjpjdw5ix001th7113ciufj6g","content":"<p>This is a programming problem on leetcode, and the interesting part is, it can be solved with two different points of<br>view. We&#39;re going to analyze the problem, prove some properties and lemma before we use them, at last write them into code.<br>The problem is as below:</p>\n<h2 id=\"leetcode753-cracking-the-safe\"><a href=\"#Leetcode-753-Cracking-the-Safe\" class=\"headerlink\" title=\"Leetcode.753. Cracking the Safe\"></a>Leetcode.753. Cracking the Safe</h2><p>There is a box protected by a password. The password is <strong>n</strong> digits, where each letter can be one of the first <strong>k</strong> digits <strong>0, 1, ..., k-1</strong>.</p>\n<p>You can keep inputting the password, the password will automatically be matched against the last <strong>n</strong> digits entered.</p>\n<p>For example, assuming the password is <strong>&quot;345&quot;</strong>, I can open it when I type <strong>&quot;012345&quot;</strong>, but I enter a total of 6 digits.</p>\n<p>Please return any string of minimum length that is guaranteed to open the box after the entire string is inputted.</p>\n<h2 id=\"approach-1-graph-theory\"><a href=\"#Approach-1-Graph-Theory\" class=\"headerlink\" title=\"Approach #1: Graph Theory.\"></a>Approach #1: Graph Theory.</h2><p>It&#39;s easy to take this problem as a graph theory, \bLet&#39;s take any number with <strong>n-1</strong> digits as a vertex, to form a single and unique trial of the password, we extend a edge from this node, forming a <strong>n</strong> digits number. It also leads to the new node that was indicated by it&#39;s [1:n] digits. So this problem is turned in to a graph problem defined as below:</p>\n<p><em>Given a directed graph with $k^{n-1}$ nodes, each nodes has $k$ edges, pointed to another node. Find a path that visits every edges exactly once.</em></p>\n<p>Sounds familiar, right? This is a very classic question in graph theory, called <a href=\"https://en.wikipedia.org/wiki/Eulerian_path\" target=\"_blank\" rel=\"noopener\">Eulerian path</a>. By definition, a Eulerian path is a trail in a finite graph which visits every edges exactly once. Eulerian cycle is an Eulerian path that starts and ends at the same vertex. Eulerian path and Eulerian cycle have following properties:</p>\n<ul>\n<li>An undirected graph has an Eulerian cycle if and only if every vertex has even degree, and all of its vertices with nonzero degree belong to a single connected component.</li>\n<li>A directed graph has an Eulerian cycle if and only if every vertex has equal in degree and out degree, and all of its vertices with nonzero degree belong to a single strongly connected component.</li>\n</ul>\n<p>Both properties are easy to prove: For the first property, for each node, it must have an edge in and an edge out, to form a Eulerian path. For the second property, it&#39;s still the same: for each node, one in, one out.</p>\n<p>To solve this problem, we have a theory called <em>Hierholzer&#39;s Algorithm</em>. The algorithm goes as follows:</p>\n<ul>\n<li>Starting from a vertex u, we walk through (unvisited) edges until we get stuck. Because the in-degrees and out-degrees of each node are equal, we can only get stuck at u, which forms a cycle.</li>\n<li>Now, for any node v we had visited that has unvisited edges, we start a new cycle from v with the same procedure as above, and then merge the cycles together to form a new cycle.</li>\n</ul>\n<p>An figure below may helps you to understand the procedure.<br><img src=\"/images/leetcode753_1.png\" alt=\"\"></p>\n<p>Now the problem seems easy to solve. All we need to do is track every edge and mark them as visited. To prevent us from getting stuck (So we don&#39;t need extra memory to store unvisited edges), we start from 000...0, and go to the next node from k-1 to 0. The code is as followed:</p>\n<p><em>java</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    Set&lt;String&gt; seen;</span><br><span class=\"line\">    StringBuilder ans;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">crackSafe</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span> &amp;&amp; k == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"0\"</span>;</span><br><span class=\"line\">        seen = <span class=\"keyword\">new</span> HashSet();</span><br><span class=\"line\">        ans = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\"></span><br><span class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n-<span class=\"number\">1</span>; ++i)</span><br><span class=\"line\">            sb.append(<span class=\"string\">\"0\"</span>);</span><br><span class=\"line\">        String start = sb.toString();</span><br><span class=\"line\"></span><br><span class=\"line\">        dfs(start, k);</span><br><span class=\"line\">        ans.append(start);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String(ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(String node, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; k; ++x) &#123;</span><br><span class=\"line\">            String nei = node + x;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!seen.contains(nei)) &#123;</span><br><span class=\"line\">                seen.add(nei);</span><br><span class=\"line\">                dfs(nei.substring(<span class=\"number\">1</span>), k);</span><br><span class=\"line\">                ans.append(x);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"approach-2-inverse-burrows-wheeler-transform\"><a href=\"#Approach-2-Inverse-Burrows-Wheeler-Transform\" class=\"headerlink\" title=\"Approach #2: Inverse Burrows-Wheeler Transform\b\"></a>Approach #2: Inverse Burrows-Wheeler Transform\b</h2><p>If we are familiar with the theory of combinatorics on words, recall that a Lyndon Word L is a word that is the unique minimum of it&#39;s rotations.</p>\n<p>One important mathematical result (due to Fredericksen and Maiorana), is that the concatenation in lexicographic order of Lyndon words with length dividing n, forms a de Bruijin sequence: a sequence where every every word (from the $k^n$​​ available) appears as a substring of length n (where we are allowed to wrap around.)</p>\n<p>For example, when n = 6, k = 2, all the Lyndon words with length dividing n in lexicographic order are (spaces for convenience): 0 000001 000011 000101 000111 001 001011 001101 001111 01 010111 011 011111 1. It turns out this is the smallest de Bruijin sequence.</p>\n<p>We can construct a de Bruijin sequence by Inverse Burrows-Wheeler Transform. Mathematically, an inverse Burrows—Wheeler transform on a word w generates a multi-set of equivalence classes consisting of strings and their rotations. These equivalence classes of strings each contain a Lyndon word as a unique minimum element, so the inverse Burrows—Wheeler transform can be considered to generate a set of Lyndon words. It can be shown that if we perform the inverse Burrows—Wheeler transform on a word w consisting of the size-k alphabet repeated $k^{n-1}$ times (so that it will produce a word the same length as the desired de Bruijn sequence), then the result will be the set of all Lyndon words whose length divides n. It follows that arranging these Lyndon words in lexicographic order will yield a de Bruijn sequence B(k,n), and that this will be the first de Bruijn sequence in lexicographic order. The following method can be used to perform the inverse Burrows—Wheeler transform, using its standard permutation:</p>\n<ul>\n<li>Sort the characters in the string w, yielding a new string w&#39;</li>\n<li>Position the string w&#39; above the string w, and map each letter&#39;s position in w&#39; to its position in w while preserving order. This process defines the standard permutation.</li>\n<li>Write this permutation in cycle notation with the smallest position in each cycle first, and the cycles sorted in increasing order.</li>\n<li>For each cycle, replace each number with the corresponding letter from string w&#39; in that position.</li>\n<li>Each cycle has now become a Lyndon word, and they are arranged in lexicographic order, so dropping the parentheses yields the first de Bruijn sequence.</li>\n</ul>\n<p>For example, to construct the smallest B(2,4) de Bruijn sequence of length 24 = 16, repeat the alphabet (ab) 8 times yielding w=abababababababab. Sort the characters in w, yielding w&#39;=aaaaaaaabbbbbbbb. Position w&#39; above w as shown, and map each element in w&#39; to the corresponding element in w by drawing a line. Number the columns as shown so we can read the cycles of the permutation:<br><img src=\"/images/leetcode753_2.png\" alt=\"\"></p>\n<p>Starting from the left, the cycles are: (1) (2 3 5 9) (4 7 13 10) (6 11) (8 15 14 12) (16).</p>\n<p>Then, replacing each number by the corresponding letter in w&#39; from that column yields: (a)(aaab)(aabb)(ab)(abbb)(b).</p>\n<p>These are all of the Lyndon words whose length divides 4, in lexicographic order, so dropping the parentheses gives B(2,4) = aaaabaabbababbbb.</p>\n<p>The code is as followed:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">crackSafe</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> M = (<span class=\"keyword\">int</span>) Math.pow(k, n-<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] P = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[M * k];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; ++i)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> q = <span class=\"number\">0</span>; q &lt; M; ++q)</span><br><span class=\"line\">                P[i*M + q] = q*k + i;</span><br><span class=\"line\"></span><br><span class=\"line\">        StringBuilder ans = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; M*k; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j = i;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (P[j] &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                ans.append(String.valueOf(j / M));</span><br><span class=\"line\">                <span class=\"keyword\">int</span> v = P[j];</span><br><span class=\"line\">                P[j] = -<span class=\"number\">1</span>;</span><br><span class=\"line\">                j = v;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n-<span class=\"number\">1</span>; ++i)</span><br><span class=\"line\">            ans.append(<span class=\"string\">\"0\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String(ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>The most attractive part is that, at the first look into this problem, this does not look like a graph problem or a description problem. However, we can use the method from two different aspect to help us understand the problem in different point of view. If we look deeper into it, we can even found that, description, text problems and graph theories are closely related to each other, which showed the beauty of math and computer science.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>This is a programming problem on leetcode, and the interesting part is, it can be solved with two different points of<br>view. We&#39;re going to analyze the problem, prove some properties and lemma before we use them, at last write them into code.<br>The problem is as below:</p>\n<h2 id=\"Leetcode-753-Cracking-the-Safe\"><a href=\"#Leetcode-753-Cracking-the-Safe\" class=\"headerlink\" title=\"Leetcode.753. Cracking the Safe\"></a>Leetcode.753. Cracking the Safe</h2><p>There is a box protected by a password. The password is <strong>n</strong> digits, where each letter can be one of the first <strong>k</strong> digits <strong>0, 1, ..., k-1</strong>.</p>\n<p>You can keep inputting the password, the password will automatically be matched against the last <strong>n</strong> digits entered.</p>\n<p>For example, assuming the password is <strong>&quot;345&quot;</strong>, I can open it when I type <strong>&quot;012345&quot;</strong>, but I enter a total of 6 digits.</p>\n<p>Please return any string of minimum length that is guaranteed to open the box after the entire string is inputted.</p>\n<h2 id=\"Approach-1-Graph-Theory\"><a href=\"#Approach-1-Graph-Theory\" class=\"headerlink\" title=\"Approach #1: Graph Theory.\"></a>Approach #1: Graph Theory.</h2><p>It&#39;s easy to take this problem as a graph theory, \bLet&#39;s take any number with <strong>n-1</strong> digits as a vertex, to form a single and unique trial of the password, we extend a edge from this node, forming a <strong>n</strong> digits number. It also leads to the new node that was indicated by it&#39;s [1:n] digits. So this problem is turned in to a graph problem defined as below:</p>\n<p><em>Given a directed graph with $k^{n-1}$ nodes, each nodes has $k$ edges, pointed to another node. Find a path that visits every edges exactly once.</em></p>\n<p>Sounds familiar, right? This is a very classic question in graph theory, called <a href=\"https://en.wikipedia.org/wiki/Eulerian_path\" target=\"_blank\" rel=\"noopener\">Eulerian path</a>. By definition, a Eulerian path is a trail in a finite graph which visits every edges exactly once. Eulerian cycle is an Eulerian path that starts and ends at the same vertex. Eulerian path and Eulerian cycle have following properties:</p>\n<ul>\n<li>An undirected graph has an Eulerian cycle if and only if every vertex has even degree, and all of its vertices with nonzero degree belong to a single connected component.</li>\n<li>A directed graph has an Eulerian cycle if and only if every vertex has equal in degree and out degree, and all of its vertices with nonzero degree belong to a single strongly connected component.</li>\n</ul>\n<p>Both properties are easy to prove: For the first property, for each node, it must have an edge in and an edge out, to form a Eulerian path. For the second property, it&#39;s still the same: for each node, one in, one out.</p>\n<p>To solve this problem, we have a theory called <em>Hierholzer&#39;s Algorithm</em>. The algorithm goes as follows:</p>\n<ul>\n<li>Starting from a vertex u, we walk through (unvisited) edges until we get stuck. Because the in-degrees and out-degrees of each node are equal, we can only get stuck at u, which forms a cycle.</li>\n<li>Now, for any node v we had visited that has unvisited edges, we start a new cycle from v with the same procedure as above, and then merge the cycles together to form a new cycle.</li>\n</ul>\n<p>An figure below may helps you to understand the procedure.<br><img src=\"/images/leetcode753_1.png\" alt=\"\"></p>\n<p>Now the problem seems easy to solve. All we need to do is track every edge and mark them as visited. To prevent us from getting stuck (So we don&#39;t need extra memory to store unvisited edges), we start from 000...0, and go to the next node from k-1 to 0. The code is as followed:</p>\n<p><em>java</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    Set&lt;String&gt; seen;</span><br><span class=\"line\">    StringBuilder ans;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">crackSafe</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span> &amp;&amp; k == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"0\"</span>;</span><br><span class=\"line\">        seen = <span class=\"keyword\">new</span> HashSet();</span><br><span class=\"line\">        ans = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\"></span><br><span class=\"line\">        StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n-<span class=\"number\">1</span>; ++i)</span><br><span class=\"line\">            sb.append(<span class=\"string\">\"0\"</span>);</span><br><span class=\"line\">        String start = sb.toString();</span><br><span class=\"line\"></span><br><span class=\"line\">        dfs(start, k);</span><br><span class=\"line\">        ans.append(start);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String(ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(String node, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; k; ++x) &#123;</span><br><span class=\"line\">            String nei = node + x;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!seen.contains(nei)) &#123;</span><br><span class=\"line\">                seen.add(nei);</span><br><span class=\"line\">                dfs(nei.substring(<span class=\"number\">1</span>), k);</span><br><span class=\"line\">                ans.append(x);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Approach-2-Inverse-Burrows-Wheeler-Transform\"><a href=\"#Approach-2-Inverse-Burrows-Wheeler-Transform\" class=\"headerlink\" title=\"Approach #2: Inverse Burrows-Wheeler Transform\b\"></a>Approach #2: Inverse Burrows-Wheeler Transform\b</h2><p>If we are familiar with the theory of combinatorics on words, recall that a Lyndon Word L is a word that is the unique minimum of it&#39;s rotations.</p>\n<p>One important mathematical result (due to Fredericksen and Maiorana), is that the concatenation in lexicographic order of Lyndon words with length dividing n, forms a de Bruijin sequence: a sequence where every every word (from the $k^n$​​ available) appears as a substring of length n (where we are allowed to wrap around.)</p>\n<p>For example, when n = 6, k = 2, all the Lyndon words with length dividing n in lexicographic order are (spaces for convenience): 0 000001 000011 000101 000111 001 001011 001101 001111 01 010111 011 011111 1. It turns out this is the smallest de Bruijin sequence.</p>\n<p>We can construct a de Bruijin sequence by Inverse Burrows-Wheeler Transform. Mathematically, an inverse Burrows—Wheeler transform on a word w generates a multi-set of equivalence classes consisting of strings and their rotations. These equivalence classes of strings each contain a Lyndon word as a unique minimum element, so the inverse Burrows—Wheeler transform can be considered to generate a set of Lyndon words. It can be shown that if we perform the inverse Burrows—Wheeler transform on a word w consisting of the size-k alphabet repeated $k^{n-1}$ times (so that it will produce a word the same length as the desired de Bruijn sequence), then the result will be the set of all Lyndon words whose length divides n. It follows that arranging these Lyndon words in lexicographic order will yield a de Bruijn sequence B(k,n), and that this will be the first de Bruijn sequence in lexicographic order. The following method can be used to perform the inverse Burrows—Wheeler transform, using its standard permutation:</p>\n<ul>\n<li>Sort the characters in the string w, yielding a new string w&#39;</li>\n<li>Position the string w&#39; above the string w, and map each letter&#39;s position in w&#39; to its position in w while preserving order. This process defines the standard permutation.</li>\n<li>Write this permutation in cycle notation with the smallest position in each cycle first, and the cycles sorted in increasing order.</li>\n<li>For each cycle, replace each number with the corresponding letter from string w&#39; in that position.</li>\n<li>Each cycle has now become a Lyndon word, and they are arranged in lexicographic order, so dropping the parentheses yields the first de Bruijn sequence.</li>\n</ul>\n<p>For example, to construct the smallest B(2,4) de Bruijn sequence of length 24 = 16, repeat the alphabet (ab) 8 times yielding w=abababababababab. Sort the characters in w, yielding w&#39;=aaaaaaaabbbbbbbb. Position w&#39; above w as shown, and map each element in w&#39; to the corresponding element in w by drawing a line. Number the columns as shown so we can read the cycles of the permutation:<br><img src=\"/images/leetcode753_2.png\" alt=\"\"></p>\n<p>Starting from the left, the cycles are: (1) (2 3 5 9) (4 7 13 10) (6 11) (8 15 14 12) (16).</p>\n<p>Then, replacing each number by the corresponding letter in w&#39; from that column yields: (a)(aaab)(aabb)(ab)(abbb)(b).</p>\n<p>These are all of the Lyndon words whose length divides 4, in lexicographic order, so dropping the parentheses gives B(2,4) = aaaabaabbababbbb.</p>\n<p>The code is as followed:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">crackSafe</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> M = (<span class=\"keyword\">int</span>) Math.pow(k, n-<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] P = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[M * k];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; ++i)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> q = <span class=\"number\">0</span>; q &lt; M; ++q)</span><br><span class=\"line\">                P[i*M + q] = q*k + i;</span><br><span class=\"line\"></span><br><span class=\"line\">        StringBuilder ans = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; M*k; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j = i;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (P[j] &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                ans.append(String.valueOf(j / M));</span><br><span class=\"line\">                <span class=\"keyword\">int</span> v = P[j];</span><br><span class=\"line\">                P[j] = -<span class=\"number\">1</span>;</span><br><span class=\"line\">                j = v;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n-<span class=\"number\">1</span>; ++i)</span><br><span class=\"line\">            ans.append(<span class=\"string\">\"0\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String(ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p>The most attractive part is that, at the first look into this problem, this does not look like a graph problem or a description problem. However, we can use the method from two different aspect to help us understand the problem in different point of view. If we look deeper into it, we can even found that, description, text problems and graph theories are closely related to each other, which showed the beauty of math and computer science.</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjpjdw5ec0002h7115zx6czw6","category_id":"cjpjdw5ef0006h711fm5t28kl","_id":"cjpjdw5ep000gh711x2ykw01e"},{"post_id":"cjpjdw5ee0005h7112hy2309f","category_id":"cjpjdw5ej000ch711862uv0qv","_id":"cjpjdw5et000mh711gipizj7v"},{"post_id":"cjpjdw5en000fh711x6e0lyyj","category_id":"cjpjdw5ef0006h711fm5t28kl","_id":"cjpjdw5et000oh711njcgyqd1"},{"post_id":"cjpjdw5er000ih711hli70rte","category_id":"cjpjdw5ef0006h711fm5t28kl","_id":"cjpjdw5eu000rh711nx9wp6c0"},{"post_id":"cjpjdw5eg0007h711q19padal","category_id":"cjpjdw5ej000ch711862uv0qv","_id":"cjpjdw5eu000th711b8zpmmb9"},{"post_id":"cjpjdw5es000kh711k959pq13","category_id":"cjpjdw5ef0006h711fm5t28kl","_id":"cjpjdw5eu000vh7113y9f0bpx"},{"post_id":"cjpjdw5ej000bh71158chbif1","category_id":"cjpjdw5et000lh7115e35p5wn","_id":"cjpjdw5ev000xh71154h34lrx"},{"post_id":"cjpjdw5em000dh711ryx55mxx","category_id":"cjpjdw5eu000sh711elrke1di","_id":"cjpjdw5ev0010h711iubuxy2w"},{"post_id":"cjpjdw5ix001th7113ciufj6g","category_id":"cjpjdw5eu000sh711elrke1di","_id":"cjpjdw5j1001vh711qdftnup7"}],"PostTag":[{"post_id":"cjpjdw5e70000h711oblcr1f8","tag_id":"cjpjdw5ee0004h7113umqizzp","_id":"cjpjdw5ei000ah71135v5pnxj"},{"post_id":"cjpjdw5ec0002h7115zx6czw6","tag_id":"cjpjdw5ei0009h7117ua77o8x","_id":"cjpjdw5et000nh711lsd40q9c"},{"post_id":"cjpjdw5ec0002h7115zx6czw6","tag_id":"cjpjdw5en000eh711adjlr2fn","_id":"cjpjdw5et000ph711e8f6u0b0"},{"post_id":"cjpjdw5ee0005h7112hy2309f","tag_id":"cjpjdw5es000jh7112o1ytu7h","_id":"cjpjdw5ev000wh7115g57yeyu"},{"post_id":"cjpjdw5ee0005h7112hy2309f","tag_id":"cjpjdw5eu000qh711jv8v0850","_id":"cjpjdw5ev000yh711010nw3ib"},{"post_id":"cjpjdw5eg0007h711q19padal","tag_id":"cjpjdw5es000jh7112o1ytu7h","_id":"cjpjdw5ev0011h711rzfhjx5s"},{"post_id":"cjpjdw5ej000bh71158chbif1","tag_id":"cjpjdw5ev000zh711b7id6hal","_id":"cjpjdw5ew0014h711z5af2fpm"},{"post_id":"cjpjdw5ej000bh71158chbif1","tag_id":"cjpjdw5ev0012h711y6xq5tah","_id":"cjpjdw5ew0015h711gy1k44he"},{"post_id":"cjpjdw5em000dh711ryx55mxx","tag_id":"cjpjdw5ev0013h7116bd9immj","_id":"cjpjdw5ew0019h711buq67k2p"},{"post_id":"cjpjdw5em000dh711ryx55mxx","tag_id":"cjpjdw5en000eh711adjlr2fn","_id":"cjpjdw5ex001ah71100aaz4cn"},{"post_id":"cjpjdw5em000dh711ryx55mxx","tag_id":"cjpjdw5ew0017h7111mntkt29","_id":"cjpjdw5ex001ch711b8w8ydn4"},{"post_id":"cjpjdw5en000fh711x6e0lyyj","tag_id":"cjpjdw5ew0018h711upd18peu","_id":"cjpjdw5ey001fh711z73m1cfv"},{"post_id":"cjpjdw5en000fh711x6e0lyyj","tag_id":"cjpjdw5ev0012h711y6xq5tah","_id":"cjpjdw5ey001gh711sghm923z"},{"post_id":"cjpjdw5en000fh711x6e0lyyj","tag_id":"cjpjdw5ex001dh711jwwde73c","_id":"cjpjdw5ey001ih711y8vsw9ij"},{"post_id":"cjpjdw5er000ih711hli70rte","tag_id":"cjpjdw5ew0018h711upd18peu","_id":"cjpjdw5ez001lh711spldlkzm"},{"post_id":"cjpjdw5er000ih711hli70rte","tag_id":"cjpjdw5ev0012h711y6xq5tah","_id":"cjpjdw5ez001mh711xayazpg0"},{"post_id":"cjpjdw5er000ih711hli70rte","tag_id":"cjpjdw5ex001dh711jwwde73c","_id":"cjpjdw5ez001oh711p8fk9crw"},{"post_id":"cjpjdw5es000kh711k959pq13","tag_id":"cjpjdw5ew0018h711upd18peu","_id":"cjpjdw5ez001qh711yu3n6vtj"},{"post_id":"cjpjdw5es000kh711k959pq13","tag_id":"cjpjdw5ev0012h711y6xq5tah","_id":"cjpjdw5ez001rh7110v2rqybm"},{"post_id":"cjpjdw5es000kh711k959pq13","tag_id":"cjpjdw5ex001dh711jwwde73c","_id":"cjpjdw5f0001sh7112lf7ycih"},{"post_id":"cjpjdw5ix001th7113ciufj6g","tag_id":"cjpjdw5ev0013h7116bd9immj","_id":"cjpjdw5j2001xh711z0etcfrq"},{"post_id":"cjpjdw5ix001th7113ciufj6g","tag_id":"cjpjdw5en000eh711adjlr2fn","_id":"cjpjdw5j2001yh711gcjgn20c"},{"post_id":"cjpjdw5ix001th7113ciufj6g","tag_id":"cjpjdw5j0001uh71135urfsok","_id":"cjpjdw5j2001zh711g0n1o1ql"},{"post_id":"cjpjdw5ix001th7113ciufj6g","tag_id":"cjpjdw5j1001wh711ny7bm0k3","_id":"cjpjdw5j20020h711hdozv7r7"}],"Tag":[{"name":"Mathmatics","_id":"cjpjdw5ee0004h7113umqizzp"},{"name":"Computer Science","_id":"cjpjdw5ei0009h7117ua77o8x"},{"name":"Algorithm","_id":"cjpjdw5en000eh711adjlr2fn"},{"name":"Mathematics","_id":"cjpjdw5es000jh7112o1ytu7h"},{"name":"Statistics","_id":"cjpjdw5eu000qh711jv8v0850"},{"name":"Github","_id":"cjpjdw5ev000zh711b7id6hal"},{"name":"Engineer","_id":"cjpjdw5ev0012h711y6xq5tah"},{"name":"Leetcode","_id":"cjpjdw5ev0013h7116bd9immj"},{"name":"Coding","_id":"cjpjdw5ew0017h7111mntkt29"},{"name":"Python","_id":"cjpjdw5ew0018h711upd18peu"},{"name":"Programming","_id":"cjpjdw5ex001dh711jwwde73c"},{"name":"Graph Theory","_id":"cjpjdw5j0001uh71135urfsok"},{"name":"Sequence Algorithm","_id":"cjpjdw5j1001wh711ny7bm0k3"}]}}